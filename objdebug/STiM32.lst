
C:\Users\igor.hollaender\Documents\GitHub\STiM32\objdebug\STiM32.o:     file format elf32-littlearm
C:\Users\igor.hollaender\Documents\GitHub\STiM32\objdebug\STiM32.o


Disassembly of section .text.STIMULATOR_Handler:

00000000 <STIMULATOR_Handler>:
STIMULATOR_Handler():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:223
* Description    : Generates single pulse sequence and reads the feedback signal
* Input          : None
* Return         : Readout 
*******************************************************************************/
void STIMULATOR_Handler( void ) 
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:227
static u32 state_change_cnt = 0;
static u32 frequency_cnt = 0;

if((frequency_cnt++) % PulseSeq.frequency_divider)
   6:	4b50      	ldr	r3, [pc, #320]	; (148 <STIMULATOR_Handler+0x148>)
   8:	681b      	ldr	r3, [r3, #0]
   a:	1c59      	adds	r1, r3, #1
   c:	4a4e      	ldr	r2, [pc, #312]	; (148 <STIMULATOR_Handler+0x148>)
   e:	6011      	str	r1, [r2, #0]
  10:	4a4e      	ldr	r2, [pc, #312]	; (14c <STIMULATOR_Handler+0x14c>)
  12:	8852      	ldrh	r2, [r2, #2]
  14:	fbb3 f1f2 	udiv	r1, r3, r2
  18:	fb02 f201 	mul.w	r2, r2, r1
  1c:	1a9b      	subs	r3, r3, r2
  1e:	2b00      	cmp	r3, #0
  20:	d000      	beq.n	24 <STIMULATOR_Handler+0x24>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:229
            {
            return;
  22:	e08e      	b.n	142 <STIMULATOR_Handler+0x142>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:277
    
#else        

    // Real code using connected hardware
                    
    switch(PulseSeq.sequence_multiplicity)
  24:	4b49      	ldr	r3, [pc, #292]	; (14c <STIMULATOR_Handler+0x14c>)
  26:	791b      	ldrb	r3, [r3, #4]
  28:	2b00      	cmp	r3, #0
  2a:	d002      	beq.n	32 <STIMULATOR_Handler+0x32>
  2c:	2b01      	cmp	r3, #1
  2e:	d003      	beq.n	38 <STIMULATOR_Handler+0x38>
  30:	e010      	b.n	54 <STIMULATOR_Handler+0x54>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:280
    {        
        case SEQUENCEMULTIPLICITY_SINGLE:
            GeneratePulseSequenceAndReadCAE();        
  32:	f7ff fffe 	bl	0 <STIMULATOR_Handler>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:281
            break;
  36:	e00d      	b.n	1e <STIMULATOR_Handler+0x1e>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:284
        
        case SEQUENCEMULTIPLICITY_DOUBLE:
            GeneratePulseSequenceAndReadCAE();        
  38:	f7ff fffe 	bl	0 <STIMULATOR_Handler>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:285
            {u32 i; WHILE_DELAY_LOOP(PulseSeq.delay_between_sequences_loop_counts)}
  3c:	4b43      	ldr	r3, [pc, #268]	; (14c <STIMULATOR_Handler+0x14c>)
  3e:	891b      	ldrh	r3, [r3, #8]
  40:	607b      	str	r3, [r7, #4]
  42:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:285 (discriminator 1)
  44:	687b      	ldr	r3, [r7, #4]
  46:	1e5a      	subs	r2, r3, #1
  48:	607a      	str	r2, [r7, #4]
  4a:	2b00      	cmp	r3, #0
  4c:	d1fa      	bne.n	44 <STIMULATOR_Handler+0x44>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:286
            GeneratePulseSequenceAndReadCAE();        
  4e:	f7ff fffe 	bl	0 <STIMULATOR_Handler>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:287
            break;
  52:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:292
    }   
                    
#endif
        
    switch(StimState)
  54:	4b3e      	ldr	r3, [pc, #248]	; (150 <STIMULATOR_Handler+0x150>)
  56:	781b      	ldrb	r3, [r3, #0]
  58:	2b03      	cmp	r3, #3
  5a:	d872      	bhi.n	142 <STIMULATOR_Handler+0x142>
  5c:	a201      	add	r2, pc, #4	; (adr r2, 64 <STIMULATOR_Handler+0x64>)
  5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  62:	bf00      	nop
  64:	00000075 	.word	0x00000075
  68:	000000ad 	.word	0x000000ad
  6c:	00000115 	.word	0x00000115
  70:	000000e5 	.word	0x000000e5
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:296
    {
        case STIMSTATE_IDLE:  
        
                LED_Set( LED_RED, LED_ON);                
  74:	4b37      	ldr	r3, [pc, #220]	; (154 <STIMULATOR_Handler+0x154>)
  76:	681b      	ldr	r3, [r3, #0]
  78:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  7c:	2001      	movs	r0, #1
  7e:	2101      	movs	r1, #1
  80:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:297
                LED_Set( LED_GREEN, LED_OFF);           
  82:	4b34      	ldr	r3, [pc, #208]	; (154 <STIMULATOR_Handler+0x154>)
  84:	681b      	ldr	r3, [r3, #0]
  86:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  8a:	2000      	movs	r0, #0
  8c:	2100      	movs	r1, #0
  8e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:301
                            
        
                // check if still idle    
                if(Readout.CAE1 >= ReadoutLimit_CAE1_for_Run)
  90:	4b31      	ldr	r3, [pc, #196]	; (158 <STIMULATOR_Handler+0x158>)
  92:	681a      	ldr	r2, [r3, #0]
  94:	4b31      	ldr	r3, [pc, #196]	; (15c <STIMULATOR_Handler+0x15c>)
  96:	881b      	ldrh	r3, [r3, #0]
  98:	429a      	cmp	r2, r3
  9a:	d306      	bcc.n	aa <STIMULATOR_Handler+0xaa>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:303
                    {
                    StimState = STIMSTATE_WAITING_FOR_RUN;
  9c:	4b2c      	ldr	r3, [pc, #176]	; (150 <STIMULATOR_Handler+0x150>)
  9e:	2202      	movs	r2, #2
  a0:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:304
                    state_change_cnt = 0;
  a2:	4b2f      	ldr	r3, [pc, #188]	; (160 <STIMULATOR_Handler+0x160>)
  a4:	2200      	movs	r2, #0
  a6:	601a      	str	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:306
                    }
                break;
  a8:	e04b      	b.n	142 <STIMULATOR_Handler+0x142>
  aa:	e04a      	b.n	142 <STIMULATOR_Handler+0x142>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:310
        
        case STIMSTATE_RUN:  
            
                LED_Set( LED_RED, LED_OFF);                
  ac:	4b29      	ldr	r3, [pc, #164]	; (154 <STIMULATOR_Handler+0x154>)
  ae:	681b      	ldr	r3, [r3, #0]
  b0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  b4:	2001      	movs	r0, #1
  b6:	2100      	movs	r1, #0
  b8:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:311
                LED_Set( LED_GREEN, LED_ON);                
  ba:	4b26      	ldr	r3, [pc, #152]	; (154 <STIMULATOR_Handler+0x154>)
  bc:	681b      	ldr	r3, [r3, #0]
  be:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  c2:	2000      	movs	r0, #0
  c4:	2101      	movs	r1, #1
  c6:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:315
                                                              
        
                // check if still running
                if(Readout.CAE1 <= ReadoutLimit_CAE1_for_Idle)
  c8:	4b23      	ldr	r3, [pc, #140]	; (158 <STIMULATOR_Handler+0x158>)
  ca:	681a      	ldr	r2, [r3, #0]
  cc:	4b25      	ldr	r3, [pc, #148]	; (164 <STIMULATOR_Handler+0x164>)
  ce:	881b      	ldrh	r3, [r3, #0]
  d0:	429a      	cmp	r2, r3
  d2:	d806      	bhi.n	e2 <STIMULATOR_Handler+0xe2>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:317
                    {
                    StimState = STIMSTATE_WAITING_FOR_IDLE;
  d4:	4b1e      	ldr	r3, [pc, #120]	; (150 <STIMULATOR_Handler+0x150>)
  d6:	2203      	movs	r2, #3
  d8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:318
                    state_change_cnt = 0;
  da:	4b21      	ldr	r3, [pc, #132]	; (160 <STIMULATOR_Handler+0x160>)
  dc:	2200      	movs	r2, #0
  de:	601a      	str	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:320
                    }                
                break;
  e0:	e02f      	b.n	142 <STIMULATOR_Handler+0x142>
  e2:	e02e      	b.n	142 <STIMULATOR_Handler+0x142>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:323
                
        case STIMSTATE_WAITING_FOR_IDLE:  
                if(Readout.CAE1 > ReadoutLimit_CAE1_for_Idle)
  e4:	4b1c      	ldr	r3, [pc, #112]	; (158 <STIMULATOR_Handler+0x158>)
  e6:	681a      	ldr	r2, [r3, #0]
  e8:	4b1e      	ldr	r3, [pc, #120]	; (164 <STIMULATOR_Handler+0x164>)
  ea:	881b      	ldrh	r3, [r3, #0]
  ec:	429a      	cmp	r2, r3
  ee:	d903      	bls.n	f8 <STIMULATOR_Handler+0xf8>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:325
                    {
                    StimState = STIMSTATE_RUN;
  f0:	4b17      	ldr	r3, [pc, #92]	; (150 <STIMULATOR_Handler+0x150>)
  f2:	2201      	movs	r2, #1
  f4:	701a      	strb	r2, [r3, #0]
  f6:	e00c      	b.n	112 <STIMULATOR_Handler+0x112>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:328
                    }
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
  f8:	4b19      	ldr	r3, [pc, #100]	; (160 <STIMULATOR_Handler+0x160>)
  fa:	681b      	ldr	r3, [r3, #0]
  fc:	1c5a      	adds	r2, r3, #1
  fe:	4b18      	ldr	r3, [pc, #96]	; (160 <STIMULATOR_Handler+0x160>)
 100:	601a      	str	r2, [r3, #0]
 102:	4b17      	ldr	r3, [pc, #92]	; (160 <STIMULATOR_Handler+0x160>)
 104:	681b      	ldr	r3, [r3, #0]
 106:	2b0a      	cmp	r3, #10
 108:	d103      	bne.n	112 <STIMULATOR_Handler+0x112>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:330
                        {
                        StimState = STIMSTATE_IDLE;
 10a:	4b11      	ldr	r3, [pc, #68]	; (150 <STIMULATOR_Handler+0x150>)
 10c:	2200      	movs	r2, #0
 10e:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:332
                        }                                          
                break;
 110:	e017      	b.n	142 <STIMULATOR_Handler+0x142>
 112:	e016      	b.n	142 <STIMULATOR_Handler+0x142>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:335
                    
        case STIMSTATE_WAITING_FOR_RUN:  
                if(Readout.CAE1 < ReadoutLimit_CAE1_for_Run)
 114:	4b10      	ldr	r3, [pc, #64]	; (158 <STIMULATOR_Handler+0x158>)
 116:	681a      	ldr	r2, [r3, #0]
 118:	4b10      	ldr	r3, [pc, #64]	; (15c <STIMULATOR_Handler+0x15c>)
 11a:	881b      	ldrh	r3, [r3, #0]
 11c:	429a      	cmp	r2, r3
 11e:	d203      	bcs.n	128 <STIMULATOR_Handler+0x128>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:337
                    {
                    StimState = STIMSTATE_IDLE;
 120:	4b0b      	ldr	r3, [pc, #44]	; (150 <STIMULATOR_Handler+0x150>)
 122:	2200      	movs	r2, #0
 124:	701a      	strb	r2, [r3, #0]
 126:	e00b      	b.n	140 <STIMULATOR_Handler+0x140>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:340
                    }
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
 128:	4b0d      	ldr	r3, [pc, #52]	; (160 <STIMULATOR_Handler+0x160>)
 12a:	681b      	ldr	r3, [r3, #0]
 12c:	1c5a      	adds	r2, r3, #1
 12e:	4b0c      	ldr	r3, [pc, #48]	; (160 <STIMULATOR_Handler+0x160>)
 130:	601a      	str	r2, [r3, #0]
 132:	4b0b      	ldr	r3, [pc, #44]	; (160 <STIMULATOR_Handler+0x160>)
 134:	681b      	ldr	r3, [r3, #0]
 136:	2b0a      	cmp	r3, #10
 138:	d102      	bne.n	140 <STIMULATOR_Handler+0x140>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:342
                        {
                        StimState = STIMSTATE_RUN;
 13a:	4b05      	ldr	r3, [pc, #20]	; (150 <STIMULATOR_Handler+0x150>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:344
                        }                                          
                break;
 140:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:348
    }

    
}
 142:	3708      	adds	r7, #8
 144:	46bd      	mov	sp, r7
 146:	bd80      	pop	{r7, pc}
 148:	00000138 	.word	0x00000138
 14c:	00000004 	.word	0x00000004
 150:	0000002c 	.word	0x0000002c
 154:	00000000 	.word	0x00000000
 158:	00000028 	.word	0x00000028
 15c:	0000002e 	.word	0x0000002e
 160:	0000013c 	.word	0x0000013c
 164:	00000030 	.word	0x00000030

Disassembly of section .text.Application_Ini:

00000000 <Application_Ini>:
Application_Ini():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:358
*                  be called only once by CircleOS.
* Input          : None
* Return         : MENU_CONTINUE_COMMAND
*******************************************************************************/
enum MENU_code Application_Ini(void)
    {        
   0:	b580      	push	{r7, lr}
   2:	b086      	sub	sp, #24
   4:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:360

    LCD_SetOffset(OFFSET_OFF);
   6:	4b45      	ldr	r3, [pc, #276]	; (11c <Application_Ini+0x11c>)
   8:	681b      	ldr	r3, [r3, #0]
   a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
   e:	2000      	movs	r0, #0
  10:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:362
    
    UTIL_SetDividerHandler(MENU_SCHHDL_ID, 10);             //  10 is default
  12:	4b42      	ldr	r3, [pc, #264]	; (11c <Application_Ini+0x11c>)
  14:	681b      	ldr	r3, [r3, #0]
  16:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
  1a:	2004      	movs	r0, #4
  1c:	210a      	movs	r1, #10
  1e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:363
    MENU_SetAppliDivider( 10 );                             // This application will be called every 10*10 =100 SysTicks
  20:	4b3e      	ldr	r3, [pc, #248]	; (11c <Application_Ini+0x11c>)
  22:	681b      	ldr	r3, [r3, #0]
  24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  28:	200a      	movs	r0, #10
  2a:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:364
    UTIL_SetSchHandler(STIMULATOR_HANDLER_ID, STIMULATOR_Handler );
  2c:	4b3b      	ldr	r3, [pc, #236]	; (11c <Application_Ini+0x11c>)
  2e:	681b      	ldr	r3, [r3, #0]
  30:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
  34:	4a3a      	ldr	r2, [pc, #232]	; (120 <Application_Ini+0x120>)
  36:	200d      	movs	r0, #13
  38:	4611      	mov	r1, r2
  3a:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:365
    UTIL_SetDividerHandler(STIMULATOR_HANDLER_ID, 1);       // This handler will be called every single SysTick
  3c:	4b37      	ldr	r3, [pc, #220]	; (11c <Application_Ini+0x11c>)
  3e:	681b      	ldr	r3, [r3, #0]
  40:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
  44:	200d      	movs	r0, #13
  46:	2101      	movs	r1, #1
  48:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:367
    
    UTIL_SetPll(SPEED_VERY_HIGH);                           // CPU frequency is 120MHz; Systick frequency is 3kHZ
  4a:	4b34      	ldr	r3, [pc, #208]	; (11c <Application_Ini+0x11c>)
  4c:	681b      	ldr	r3, [r3, #0]
  4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
  52:	2005      	movs	r0, #5
  54:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:370
                                                            // see EvoPrimer Manual for STM32F429ZI
    
    SetAutorun();
  56:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:377
    //-------------------------------------
    // Initialize ...
        
    
    // ... Frequency and Pulse Sequence
    SetFrequency_1();
  5a:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:378
    SetPulseSequence_1();
  5e:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:382
        
    
    // ... GUI    
    GUI(GUI_INITIALIZE,0);
  62:	2000      	movs	r0, #0
  64:	2100      	movs	r1, #0
  66:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:385
    
    // ... request mechanism
    ActualPendingRequest = PENDING_REQUEST_NONE;
  6a:	4b2e      	ldr	r3, [pc, #184]	; (124 <Application_Ini+0x124>)
  6c:	2200      	movs	r2, #0
  6e:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:388
    
    // ... state machine
    StimState = STIMSTATE_IDLE; 
  70:	4b2d      	ldr	r3, [pc, #180]	; (128 <Application_Ini+0x128>)
  72:	2200      	movs	r2, #0
  74:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:391
    
    // ... readout limits
    ReadoutLimit_CAE1_for_Run = 10;
  76:	4b2d      	ldr	r3, [pc, #180]	; (12c <Application_Ini+0x12c>)
  78:	220a      	movs	r2, #10
  7a:	801a      	strh	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:392
    ReadoutLimit_CAE1_for_Idle = 10;
  7c:	4b2c      	ldr	r3, [pc, #176]	; (130 <Application_Ini+0x130>)
  7e:	220a      	movs	r2, #10
  80:	801a      	strh	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:414
    
    // SPI Setup
    
    tCX_SPI_Config s_SpiInit;
    
    s_SpiInit.Speed = CX_SPI_Mode_VeryHigh;             // The speed range of the serial bit rate.
  82:	2304      	movs	r3, #4
  84:	703b      	strb	r3, [r7, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:415
    s_SpiInit.WordLength = CX_SPI_8_Bits;               // The number of transferred data bit. Standard is 8, but could be 16 for some specific devices.
  86:	2300      	movs	r3, #0
  88:	707b      	strb	r3, [r7, #1]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:416
    s_SpiInit.Mode = CX_SPI_MODE_MASTER;                // 1: master, 0: slave
  8a:	2301      	movs	r3, #1
  8c:	70bb      	strb	r3, [r7, #2]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:417
    s_SpiInit.Polarity = CX_SPI_POL_LOW;                // Indicates the steady state (idle state of the clock when no transmission).
  8e:	2300      	movs	r3, #0
  90:	70fb      	strb	r3, [r7, #3]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:418
    s_SpiInit.Phase = CX_SPI_PHA_FIRST;                 // Phase:  0 indicates that the first edge of the clock when leaving the idle state is active
  92:	2300      	movs	r3, #0
  94:	713b      	strb	r3, [r7, #4]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:420
                                                        //         1 indicates that the second edge of the clock when leaving the idle state is active
    s_SpiInit.MSB1LSB0 = CX_SPI_MSBFIRST;               // First bit to be sent.  1: MSB first, 0: LSB first
  96:	2300      	movs	r3, #0
  98:	717b      	strb	r3, [r7, #5]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:421
    s_SpiInit.Nss = CX_SPI_Soft;                        // NSS signal management : 1 = by hardware (NSS pin), 0 = by software using the SSI bit
  9a:	2300      	movs	r3, #0
  9c:	71bb      	strb	r3, [r7, #6]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:424
                                                        // IH141230 this must be set to CX_SPI_Soft, but the actual didgital potentiometer
                                                        // update is triggered by rising edge of NSS bit (PIN8)
    s_SpiInit.RxBuffer = MyFifoRxBuffer;                // Rolling buffer to be used for reception
  9e:	4b25      	ldr	r3, [pc, #148]	; (134 <Application_Ini+0x134>)
  a0:	60bb      	str	r3, [r7, #8]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:425
    s_SpiInit.RxBufferLen = sizeof( MyFifoRxBuffer );   // Size of the receive buffer
  a2:	2380      	movs	r3, #128	; 0x80
  a4:	60fb      	str	r3, [r7, #12]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:426
    s_SpiInit.TxBuffer = MyFifoTxBuffer;                // Buffer to be used for transmission
  a6:	4b24      	ldr	r3, [pc, #144]	; (138 <Application_Ini+0x138>)
  a8:	613b      	str	r3, [r7, #16]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:427
    s_SpiInit.TxBufferLen = sizeof( MyFifoRxBuffer );   // Size
  aa:	2380      	movs	r3, #128	; 0x80
  ac:	617b      	str	r3, [r7, #20]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:429

    CX_Configure( CX_SPI,  &s_SpiInit, 0 );
  ae:	4b1b      	ldr	r3, [pc, #108]	; (11c <Application_Ini+0x11c>)
  b0:	681b      	ldr	r3, [r3, #0]
  b2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  b6:	463a      	mov	r2, r7
  b8:	2021      	movs	r0, #33	; 0x21
  ba:	4611      	mov	r1, r2
  bc:	2200      	movs	r2, #0
  be:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:432
                            
    // NSS (aka CS(neg)) pin setup                        
    CX_Configure( CX_GPIO_PIN8, CX_GPIO_Mode_OUT_PP, 0 );  //Push-pull mode    
  c0:	4b16      	ldr	r3, [pc, #88]	; (11c <Application_Ini+0x11c>)
  c2:	681b      	ldr	r3, [r3, #0]
  c4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  c8:	2008      	movs	r0, #8
  ca:	2104      	movs	r1, #4
  cc:	2200      	movs	r2, #0
  ce:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:433
    CX_Write( CX_GPIO_PIN8, CX_GPIO_HIGH, 0 );             // initial NSS state is HIGH
  d0:	4b12      	ldr	r3, [pc, #72]	; (11c <Application_Ini+0x11c>)
  d2:	681b      	ldr	r3, [r3, #0]
  d4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  d8:	2008      	movs	r0, #8
  da:	2101      	movs	r1, #1
  dc:	2200      	movs	r2, #0
  de:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:437
    
    // ADC Setup
   
    CX_Configure( CX_ADC1,  0 , 0 );
  e0:	4b0e      	ldr	r3, [pc, #56]	; (11c <Application_Ini+0x11c>)
  e2:	681b      	ldr	r3, [r3, #0]
  e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  e8:	2023      	movs	r0, #35	; 0x23
  ea:	2100      	movs	r1, #0
  ec:	2200      	movs	r2, #0
  ee:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:445
 
    //-------------------------------------
    
    //--- at start, show intro screen for 2 seconds
        
    ActualPendingRequest = PENDING_REQUEST_SHOWING_INTRO_SCREEN;
  f0:	4b0c      	ldr	r3, [pc, #48]	; (124 <Application_Ini+0x124>)
  f2:	2202      	movs	r2, #2
  f4:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:446
    GUI(GUI_INTRO_SCREEN,0);                                                     
  f6:	2003      	movs	r0, #3
  f8:	2100      	movs	r1, #0
  fa:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:447
    UTIL_SetTimer(2000,TimerHandler1);
  fe:	4b07      	ldr	r3, [pc, #28]	; (11c <Application_Ini+0x11c>)
 100:	681b      	ldr	r3, [r3, #0]
 102:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 106:	4a0d      	ldr	r2, [pc, #52]	; (13c <Application_Ini+0x13c>)
 108:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 10c:	4611      	mov	r1, r2
 10e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:449
        
    return MENU_CONTINUE_COMMAND;
 110:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:450
    }
 112:	4618      	mov	r0, r3
 114:	3718      	adds	r7, #24
 116:	46bd      	mov	sp, r7
 118:	bd80      	pop	{r7, pc}
 11a:	bf00      	nop
	...
 128:	0000002c 	.word	0x0000002c
 12c:	0000002e 	.word	0x0000002e
 130:	00000030 	.word	0x00000030
 134:	00000034 	.word	0x00000034
 138:	000000b4 	.word	0x000000b4
 13c:	00000000 	.word	0x00000000

Disassembly of section .text.Application_Handler:

00000000 <Application_Handler>:
Application_Handler():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:461
*                  every multiple of SysTisk by CircleOS while it returns MENU_CONTINUE.
* Input          : None
* Return         : MENU_CONTINUE
*******************************************************************************/
enum MENU_code Application_Handler(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:469
    
    static int GUIUpdate_cnt = 0;    
        
  
    // process special requests first    
    switch(ActualPendingRequest)
   4:	4b1d      	ldr	r3, [pc, #116]	; (7c <Application_Handler+0x7c>)
   6:	781b      	ldrb	r3, [r3, #0]
   8:	2b01      	cmp	r3, #1
   a:	d003      	beq.n	14 <Application_Handler+0x14>
   c:	2b02      	cmp	r3, #2
   e:	d00f      	beq.n	30 <Application_Handler+0x30>
  10:	2b00      	cmp	r3, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:472
    {
        case PENDING_REQUEST_NONE:  // this is default; continue
            break;
  12:	e00f      	b.n	34 <Application_Handler+0x34>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:476
                              
        case PENDING_REQUEST_REDRAW:  
            
            BUTTON_SetMode( BUTTON_ONOFF ) ;            
  14:	4b1a      	ldr	r3, [pc, #104]	; (80 <Application_Handler+0x80>)
  16:	681b      	ldr	r3, [r3, #0]
  18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
  1c:	2000      	movs	r0, #0
  1e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:477
            ActualPendingRequest = PENDING_REQUEST_NONE;           
  20:	4b16      	ldr	r3, [pc, #88]	; (7c <Application_Handler+0x7c>)
  22:	2200      	movs	r2, #0
  24:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:478
            GUI(GUI_CLEAR,0);                                                     
  26:	2002      	movs	r0, #2
  28:	2100      	movs	r1, #0
  2a:	f7ff fffe 	bl	0 <Application_Handler>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:479
            break;       
  2e:	e001      	b.n	34 <Application_Handler+0x34>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:482
        
        case PENDING_REQUEST_SHOWING_INTRO_SCREEN:            
            return MENU_CONTINUE;
  30:	2301      	movs	r3, #1
  32:	e021      	b.n	78 <Application_Handler+0x78>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:488
    }
  
    // normal processing    
    if (!(GUIUpdate_cnt % GUIUPDATE_DIVIDER))
        {
        GUI(GUI_NORMAL_UPDATE,0);        
  34:	2001      	movs	r0, #1
  36:	2100      	movs	r1, #0
  38:	f7ff fffe 	bl	0 <Application_Handler>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:490
        }   
    GUIUpdate_cnt++;
  3c:	4b11      	ldr	r3, [pc, #68]	; (84 <Application_Handler+0x84>)
  3e:	681b      	ldr	r3, [r3, #0]
  40:	1c5a      	adds	r2, r3, #1
  42:	4b10      	ldr	r3, [pc, #64]	; (84 <Application_Handler+0x84>)
  44:	601a      	str	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:493
  
    // check button state to invoke main menu
    if ( BUTTON_GetState() == BUTTON_PUSHED )
  46:	4b0e      	ldr	r3, [pc, #56]	; (80 <Application_Handler+0x80>)
  48:	681b      	ldr	r3, [r3, #0]
  4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
  4e:	4798      	blx	r3
  50:	4603      	mov	r3, r0
  52:	b2db      	uxtb	r3, r3
  54:	b25b      	sxtb	r3, r3
  56:	2b01      	cmp	r3, #1
  58:	d10d      	bne.n	76 <Application_Handler+0x76>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:495
    {
        BUTTON_WaitForRelease();
  5a:	4b09      	ldr	r3, [pc, #36]	; (80 <Application_Handler+0x80>)
  5c:	681b      	ldr	r3, [r3, #0]
  5e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  62:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:496
        MENU_Set( ( tMenu* ) &MenuMainSTiM32 );
  64:	4b06      	ldr	r3, [pc, #24]	; (80 <Application_Handler+0x80>)
  66:	681b      	ldr	r3, [r3, #0]
  68:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
  6c:	4a06      	ldr	r2, [pc, #24]	; (88 <Application_Handler+0x88>)
  6e:	4610      	mov	r0, r2
  70:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:497
        return MENU_CHANGE;
  72:	2303      	movs	r3, #3
  74:	e000      	b.n	78 <Application_Handler+0x78>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:500
    }

    return MENU_CONTINUE;  
  76:	2301      	movs	r3, #1
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:501
    }
  78:	4618      	mov	r0, r3
  7a:	bd80      	pop	{r7, pc}
	...
  84:	00000140 	.word	0x00000140
  88:	00000000 	.word	0x00000000

Disassembly of section .text.TimerHandler1:

00000000 <TimerHandler1>:
TimerHandler1():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:507

/*******************************************************************************
* Function Group: Timer Handlers
*******************************************************************************/
void TimerHandler1(void)
    {    
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:508
    ActualPendingRequest = PENDING_REQUEST_NONE;
   4:	4b03      	ldr	r3, [pc, #12]	; (14 <TimerHandler1+0x14>)
   6:	2200      	movs	r2, #0
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:509
    GUI(GUI_INITIALIZE,0);
   a:	2000      	movs	r0, #0
   c:	2100      	movs	r1, #0
   e:	f7ff fffe 	bl	0 <TimerHandler1>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:510
    }
  12:	bd80      	pop	{r7, pc}
  14:	00000000 	.word	0x00000000

Disassembly of section .text.MenuSetup_Freq:

00000000 <MenuSetup_Freq>:
MenuSetup_Freq():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:516

/*******************************************************************************
* Function Group: Setup Menu Handlers
*******************************************************************************/
enum MENU_code  MenuSetup_Freq(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:517
    MENU_Set( ( tMenu* ) &MenuSetFrequency );                 
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <MenuSetup_Freq+0x18>)
   6:	681b      	ldr	r3, [r3, #0]
   8:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
   c:	4a03      	ldr	r2, [pc, #12]	; (1c <MenuSetup_Freq+0x1c>)
   e:	4610      	mov	r0, r2
  10:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:518
    return MENU_CHANGE;
  12:	2303      	movs	r3, #3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:519
    }
  14:	4618      	mov	r0, r3
  16:	bd80      	pop	{r7, pc}
	...

Disassembly of section .text.MenuSetup_PSeq:

00000000 <MenuSetup_PSeq>:
MenuSetup_PSeq():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:522

enum MENU_code  MenuSetup_PSeq(void)
    {    
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:523
    MENU_Set( ( tMenu* ) &MenuSetPulseSequence );             
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <MenuSetup_PSeq+0x18>)
   6:	681b      	ldr	r3, [r3, #0]
   8:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
   c:	4a03      	ldr	r2, [pc, #12]	; (1c <MenuSetup_PSeq+0x1c>)
   e:	4610      	mov	r0, r2
  10:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:524
    return MENU_CHANGE;
  12:	2303      	movs	r3, #3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:525
    }
  14:	4618      	mov	r0, r3
  16:	bd80      	pop	{r7, pc}
	...

Disassembly of section .text.SetFrequency_1:

00000000 <SetFrequency_1>:
SetFrequency_1():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:528

enum MENU_code  SetFrequency_1(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:529
    PulseSeq.frequency = FREQUENCY_1KHZ;     
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <SetFrequency_1+0x1c>)
   6:	2201      	movs	r2, #1
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:530
    UpdatePulseSequence();
   a:	f7ff fffe 	bl	0 <SetFrequency_1>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:532
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
   e:	4b04      	ldr	r3, [pc, #16]	; (20 <SetFrequency_1+0x20>)
  10:	2201      	movs	r2, #1
  12:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:533
    return MENU_CONTINUE_COMMAND;
  14:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:534
    }
  16:	4618      	mov	r0, r3
  18:	bd80      	pop	{r7, pc}
  1a:	bf00      	nop
  1c:	00000004 	.word	0x00000004
  20:	00000000 	.word	0x00000000

Disassembly of section .text.SetFrequency_2:

00000000 <SetFrequency_2>:
SetFrequency_2():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:537

enum MENU_code  SetFrequency_2(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:538
    PulseSeq.frequency = FREQUENCY_2KHZ;        
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <SetFrequency_2+0x1c>)
   6:	2202      	movs	r2, #2
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:539
    UpdatePulseSequence();
   a:	f7ff fffe 	bl	0 <SetFrequency_2>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:541
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
   e:	4b04      	ldr	r3, [pc, #16]	; (20 <SetFrequency_2+0x20>)
  10:	2201      	movs	r2, #1
  12:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:542
    return MENU_CONTINUE_COMMAND;
  14:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:543
    }
  16:	4618      	mov	r0, r3
  18:	bd80      	pop	{r7, pc}
  1a:	bf00      	nop
  1c:	00000004 	.word	0x00000004
  20:	00000000 	.word	0x00000000

Disassembly of section .text.SetFrequency_3:

00000000 <SetFrequency_3>:
SetFrequency_3():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:546

enum MENU_code  SetFrequency_3(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:547
    PulseSeq.frequency = FREQUENCY_3KHZ;    
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <SetFrequency_3+0x1c>)
   6:	2203      	movs	r2, #3
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:548
    UpdatePulseSequence();
   a:	f7ff fffe 	bl	0 <SetFrequency_3>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:550
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
   e:	4b04      	ldr	r3, [pc, #16]	; (20 <SetFrequency_3+0x20>)
  10:	2201      	movs	r2, #1
  12:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:551
    return MENU_CONTINUE_COMMAND;
  14:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:552
    }
  16:	4618      	mov	r0, r3
  18:	bd80      	pop	{r7, pc}
  1a:	bf00      	nop
  1c:	00000004 	.word	0x00000004
  20:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_1:

00000000 <SetPulseSequence_1>:
SetPulseSequence_1():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:555

enum MENU_code  SetPulseSequence_1(void)
    {       
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:556
    PulseSeq.delay1_microseconds = 200;        
   4:	4b09      	ldr	r3, [pc, #36]	; (2c <SetPulseSequence_1+0x2c>)
   6:	22c8      	movs	r2, #200	; 0xc8
   8:	821a      	strh	r2, [r3, #16]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:557
    PulseSeq.delay2_microseconds = 50;        
   a:	4b08      	ldr	r3, [pc, #32]	; (2c <SetPulseSequence_1+0x2c>)
   c:	2232      	movs	r2, #50	; 0x32
   e:	82da      	strh	r2, [r3, #22]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:558
    PulseSeq.delay3_microseconds = 0;             
  10:	4b06      	ldr	r3, [pc, #24]	; (2c <SetPulseSequence_1+0x2c>)
  12:	2200      	movs	r2, #0
  14:	839a      	strh	r2, [r3, #28]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:559
    PulseSeq.delay_between_sequences_microseconds = 200;    
  16:	4b05      	ldr	r3, [pc, #20]	; (2c <SetPulseSequence_1+0x2c>)
  18:	22c8      	movs	r2, #200	; 0xc8
  1a:	80da      	strh	r2, [r3, #6]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:560
    UpdatePulseSequence();
  1c:	f7ff fffe 	bl	0 <SetPulseSequence_1>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:562
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  20:	4b03      	ldr	r3, [pc, #12]	; (30 <SetPulseSequence_1+0x30>)
  22:	2201      	movs	r2, #1
  24:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:563
    return MENU_CONTINUE_COMMAND;
  26:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:564
    }
  28:	4618      	mov	r0, r3
  2a:	bd80      	pop	{r7, pc}
  2c:	00000004 	.word	0x00000004
  30:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_2:

00000000 <SetPulseSequence_2>:
SetPulseSequence_2():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:567

enum MENU_code  SetPulseSequence_2(void)
    {    
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:568
    PulseSeq.delay1_microseconds = 0;        
   4:	4b0a      	ldr	r3, [pc, #40]	; (30 <SetPulseSequence_2+0x30>)
   6:	2200      	movs	r2, #0
   8:	821a      	strh	r2, [r3, #16]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:569
    PulseSeq.delay2_microseconds = 50;        
   a:	4b09      	ldr	r3, [pc, #36]	; (30 <SetPulseSequence_2+0x30>)
   c:	2232      	movs	r2, #50	; 0x32
   e:	82da      	strh	r2, [r3, #22]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:570
    PulseSeq.delay3_microseconds = 50;          
  10:	4b07      	ldr	r3, [pc, #28]	; (30 <SetPulseSequence_2+0x30>)
  12:	2232      	movs	r2, #50	; 0x32
  14:	839a      	strh	r2, [r3, #28]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:571
    PulseSeq.delay_between_sequences_microseconds = 400;        
  16:	4b06      	ldr	r3, [pc, #24]	; (30 <SetPulseSequence_2+0x30>)
  18:	f44f 72c8 	mov.w	r2, #400	; 0x190
  1c:	80da      	strh	r2, [r3, #6]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:572
    UpdatePulseSequence();
  1e:	f7ff fffe 	bl	0 <SetPulseSequence_2>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:574
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  22:	4b04      	ldr	r3, [pc, #16]	; (34 <SetPulseSequence_2+0x34>)
  24:	2201      	movs	r2, #1
  26:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:575
    return MENU_CONTINUE_COMMAND;
  28:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:576
    }
  2a:	4618      	mov	r0, r3
  2c:	bd80      	pop	{r7, pc}
  2e:	bf00      	nop
  30:	00000004 	.word	0x00000004
  34:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_3:

00000000 <SetPulseSequence_3>:
SetPulseSequence_3():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:579

enum MENU_code  SetPulseSequence_3(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:580
    PulseSeq.delay1_microseconds = 50;        
   4:	4b0a      	ldr	r3, [pc, #40]	; (30 <SetPulseSequence_3+0x30>)
   6:	2232      	movs	r2, #50	; 0x32
   8:	821a      	strh	r2, [r3, #16]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:581
    PulseSeq.delay2_microseconds = 50;        
   a:	4b09      	ldr	r3, [pc, #36]	; (30 <SetPulseSequence_3+0x30>)
   c:	2232      	movs	r2, #50	; 0x32
   e:	82da      	strh	r2, [r3, #22]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:582
    PulseSeq.delay3_microseconds = 50;      
  10:	4b07      	ldr	r3, [pc, #28]	; (30 <SetPulseSequence_3+0x30>)
  12:	2232      	movs	r2, #50	; 0x32
  14:	839a      	strh	r2, [r3, #28]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:583
    PulseSeq.delay_between_sequences_microseconds = 400;        
  16:	4b06      	ldr	r3, [pc, #24]	; (30 <SetPulseSequence_3+0x30>)
  18:	f44f 72c8 	mov.w	r2, #400	; 0x190
  1c:	80da      	strh	r2, [r3, #6]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:584
    UpdatePulseSequence();    
  1e:	f7ff fffe 	bl	0 <SetPulseSequence_3>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:586
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  22:	4b04      	ldr	r3, [pc, #16]	; (34 <SetPulseSequence_3+0x34>)
  24:	2201      	movs	r2, #1
  26:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:587
    return MENU_CONTINUE_COMMAND;
  28:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:588
    }
  2a:	4618      	mov	r0, r3
  2c:	bd80      	pop	{r7, pc}
  2e:	bf00      	nop
  30:	00000004 	.word	0x00000004
  34:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_4:

00000000 <SetPulseSequence_4>:
SetPulseSequence_4():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:591

enum MENU_code  SetPulseSequence_4(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:592
    PulseSeq.delay1_microseconds = 400;        
   4:	4b0a      	ldr	r3, [pc, #40]	; (30 <SetPulseSequence_4+0x30>)
   6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   a:	821a      	strh	r2, [r3, #16]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:593
    PulseSeq.delay2_microseconds = 0;        
   c:	4b08      	ldr	r3, [pc, #32]	; (30 <SetPulseSequence_4+0x30>)
   e:	2200      	movs	r2, #0
  10:	82da      	strh	r2, [r3, #22]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:594
    PulseSeq.delay3_microseconds = 0;
  12:	4b07      	ldr	r3, [pc, #28]	; (30 <SetPulseSequence_4+0x30>)
  14:	2200      	movs	r2, #0
  16:	839a      	strh	r2, [r3, #28]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:595
    PulseSeq.delay_between_sequences_microseconds = 100;        
  18:	4b05      	ldr	r3, [pc, #20]	; (30 <SetPulseSequence_4+0x30>)
  1a:	2264      	movs	r2, #100	; 0x64
  1c:	80da      	strh	r2, [r3, #6]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:596
    UpdatePulseSequence();    
  1e:	f7ff fffe 	bl	0 <SetPulseSequence_4>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:598
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  22:	4b04      	ldr	r3, [pc, #16]	; (34 <SetPulseSequence_4+0x34>)
  24:	2201      	movs	r2, #1
  26:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:599
    return MENU_CONTINUE_COMMAND;
  28:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:600
    }
  2a:	4618      	mov	r0, r3
  2c:	bd80      	pop	{r7, pc}
  2e:	bf00      	nop
  30:	00000004 	.word	0x00000004
  34:	00000000 	.word	0x00000000

Disassembly of section .text.Quit:

00000000 <Quit>:
Quit():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:603

enum MENU_code Quit( void )
{
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:604
        ActualPendingRequest = PENDING_REQUEST_REDRAW;   
   4:	4b2a      	ldr	r3, [pc, #168]	; (b0 <Quit+0xb0>)
   6:	2201      	movs	r2, #1
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:606

        BUTTON_WaitForRelease();                                     
   a:	4b2a      	ldr	r3, [pc, #168]	; (b4 <Quit+0xb4>)
   c:	681b      	ldr	r3, [r3, #0]
   e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  12:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:607
        BUTTON_SetMode( BUTTON_ONOFF_FORMAIN );
  14:	4b27      	ldr	r3, [pc, #156]	; (b4 <Quit+0xb4>)
  16:	681b      	ldr	r3, [r3, #0]
  18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
  1c:	2001      	movs	r0, #1
  1e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:609
        
        LCD_SetBackLightOn();
  20:	4b24      	ldr	r3, [pc, #144]	; (b4 <Quit+0xb4>)
  22:	681b      	ldr	r3, [r3, #0]
  24:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  28:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:610
        LCD_SetRotateScreen( 1 );
  2a:	4b22      	ldr	r3, [pc, #136]	; (b4 <Quit+0xb4>)
  2c:	681b      	ldr	r3, [r3, #0]
  2e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
  32:	2001      	movs	r0, #1
  34:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:611
        MENU_ClearCurrentCommand();
  36:	4b1f      	ldr	r3, [pc, #124]	; (b4 <Quit+0xb4>)
  38:	681b      	ldr	r3, [r3, #0]
  3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  3e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:612
        DRAW_SetDefaultColor();
  40:	4b1c      	ldr	r3, [pc, #112]	; (b4 <Quit+0xb4>)
  42:	681b      	ldr	r3, [r3, #0]
  44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  48:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:613
        DRAW_SetCharMagniCoeff( 1 );                                                      
  4a:	4b1a      	ldr	r3, [pc, #104]	; (b4 <Quit+0xb4>)
  4c:	681b      	ldr	r3, [r3, #0]
  4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  52:	2001      	movs	r0, #1
  54:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:614
        DRAW_Clear();
  56:	4b17      	ldr	r3, [pc, #92]	; (b4 <Quit+0xb4>)
  58:	681b      	ldr	r3, [r3, #0]
  5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  5e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:615
        POINTER_SetMode( POINTER_ON );      
  60:	4b14      	ldr	r3, [pc, #80]	; (b4 <Quit+0xb4>)
  62:	681b      	ldr	r3, [r3, #0]
  64:	699b      	ldr	r3, [r3, #24]
  66:	2001      	movs	r0, #1
  68:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:617
        
        UTIL_SetPll(SPEED_MEDIUM);
  6a:	4b12      	ldr	r3, [pc, #72]	; (b4 <Quit+0xb4>)
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
  72:	2003      	movs	r0, #3
  74:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:619
                
        UTIL_SetSchHandler(STIMULATOR_HANDLER_ID, 0 );
  76:	4b0f      	ldr	r3, [pc, #60]	; (b4 <Quit+0xb4>)
  78:	681b      	ldr	r3, [r3, #0]
  7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
  7e:	200d      	movs	r0, #13
  80:	2100      	movs	r1, #0
  82:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:620
        LED_Set( LED_GREEN, LED_OFF );
  84:	4b0b      	ldr	r3, [pc, #44]	; (b4 <Quit+0xb4>)
  86:	681b      	ldr	r3, [r3, #0]
  88:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  8c:	2000      	movs	r0, #0
  8e:	2100      	movs	r1, #0
  90:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:621
        LED_Set( LED_RED, LED_OFF );
  92:	4b08      	ldr	r3, [pc, #32]	; (b4 <Quit+0xb4>)
  94:	681b      	ldr	r3, [r3, #0]
  96:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  9a:	2001      	movs	r0, #1
  9c:	2100      	movs	r1, #0
  9e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:623
        
        return MENU_Quit();
  a0:	4b04      	ldr	r3, [pc, #16]	; (b4 <Quit+0xb4>)
  a2:	681b      	ldr	r3, [r3, #0]
  a4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
  a8:	4798      	blx	r3
  aa:	4603      	mov	r3, r0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:624
}
  ac:	4618      	mov	r0, r3
  ae:	bd80      	pop	{r7, pc}
	...

Disassembly of section .text.RestoreApp:

00000000 <RestoreApp>:
RestoreApp():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:627

enum MENU_code RestoreApp( void )
{    
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:628
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <RestoreApp+0x18>)
   6:	2201      	movs	r2, #1
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:629
    return MENU_RESTORE_COMMAND;    
   a:	2306      	movs	r3, #6
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:630
}
   c:	4618      	mov	r0, r3
   e:	46bd      	mov	sp, r7
  10:	f85d 7b04 	ldr.w	r7, [sp], #4
  14:	4770      	bx	lr
  16:	bf00      	nop
  18:	00000000 	.word	0x00000000

Disassembly of section .text.Cancel:

00000000 <Cancel>:
Cancel():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:633

enum MENU_code Cancel( void )
{
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:634
    ActualPendingRequest = PENDING_REQUEST_REDRAW;        
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <Cancel+0x18>)
   6:	2201      	movs	r2, #1
   8:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:635
    return MENU_CONTINUE_COMMAND;
   a:	2304      	movs	r3, #4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:636
}
   c:	4618      	mov	r0, r3
   e:	46bd      	mov	sp, r7
  10:	f85d 7b04 	ldr.w	r7, [sp], #4
  14:	4770      	bx	lr
  16:	bf00      	nop
  18:	00000000 	.word	0x00000000

Disassembly of section .text.LongDelay:

00000000 <LongDelay>:
LongDelay():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:647
*                  exit to main menu after 4 seconds
* Input          : u8 delayInSeconds
* Return         : None
*******************************************************************************/
static void LongDelay(u8 delayInSeconds)
    {
   0:	b580      	push	{r7, lr}
   2:	b084      	sub	sp, #16
   4:	af00      	add	r7, sp, #0
   6:	4603      	mov	r3, r0
   8:	71fb      	strb	r3, [r7, #7]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:650
    u8 hh, mm, ss, ss2;
    
    RTC_GetTime( &hh, &mm, &ss );
   a:	4b17      	ldr	r3, [pc, #92]	; (68 <LongDelay+0x68>)
   c:	681b      	ldr	r3, [r3, #0]
   e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
  12:	f107 000f 	add.w	r0, r7, #15
  16:	f107 010e 	add.w	r1, r7, #14
  1a:	f107 020d 	add.w	r2, r7, #13
  1e:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:651
    ss = ss + delayInSeconds;
  20:	7b7a      	ldrb	r2, [r7, #13]
  22:	79fb      	ldrb	r3, [r7, #7]
  24:	4413      	add	r3, r2
  26:	b2db      	uxtb	r3, r3
  28:	737b      	strb	r3, [r7, #13]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:652
    ss = ss % 60;
  2a:	7b7a      	ldrb	r2, [r7, #13]
  2c:	4b0f      	ldr	r3, [pc, #60]	; (6c <LongDelay+0x6c>)
  2e:	fba3 1302 	umull	r1, r3, r3, r2
  32:	0959      	lsrs	r1, r3, #5
  34:	460b      	mov	r3, r1
  36:	011b      	lsls	r3, r3, #4
  38:	1a5b      	subs	r3, r3, r1
  3a:	009b      	lsls	r3, r3, #2
  3c:	1ad3      	subs	r3, r2, r3
  3e:	b2db      	uxtb	r3, r3
  40:	737b      	strb	r3, [r7, #13]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:656 (discriminator 1)

    do
        {
        RTC_GetTime( &hh, &mm, &ss2 );
  42:	4b09      	ldr	r3, [pc, #36]	; (68 <LongDelay+0x68>)
  44:	681b      	ldr	r3, [r3, #0]
  46:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
  4a:	f107 000f 	add.w	r0, r7, #15
  4e:	f107 010e 	add.w	r1, r7, #14
  52:	f107 020c 	add.w	r2, r7, #12
  56:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:658 (discriminator 1)
        }
    while ( ss2 != ss );           // do while < delayInSeconds seconds
  58:	7b3a      	ldrb	r2, [r7, #12]
  5a:	7b7b      	ldrb	r3, [r7, #13]
  5c:	429a      	cmp	r2, r3
  5e:	d1f0      	bne.n	42 <LongDelay+0x42>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:659
    }
  60:	3710      	adds	r7, #16
  62:	46bd      	mov	sp, r7
  64:	bd80      	pop	{r7, pc}
  66:	bf00      	nop
  68:	00000000 	.word	0x00000000
  6c:	88888889 	.word	0x88888889

Disassembly of section .text.UpdatePulseSequence:

00000000 <UpdatePulseSequence>:
UpdatePulseSequence():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:675
* Return         : u32 loopCounts
*******************************************************************************/
#define MICROSECONDS_TO_LOOP_COUNTS(us)   ((float)(us)*15.0)  //IH150107 corrected (was 7.78 before)

static void UpdatePulseSequence()
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:676
        PulseSeq.delay0_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay0_microseconds);
   4:	4b57      	ldr	r3, [pc, #348]	; (164 <UpdatePulseSequence+0x164>)
   6:	895b      	ldrh	r3, [r3, #10]
   8:	ee07 3a10 	vmov	s14, r3
   c:	eef8 7a47 	vcvt.f32.u32	s15, s14
  10:	ee17 0a90 	vmov	r0, s15
  14:	f7ff fffe 	bl	0 <__aeabi_f2d>
  18:	4602      	mov	r2, r0
  1a:	460b      	mov	r3, r1
  1c:	4610      	mov	r0, r2
  1e:	4619      	mov	r1, r3
  20:	f04f 0200 	mov.w	r2, #0
  24:	4b50      	ldr	r3, [pc, #320]	; (144 <__aeabi_dmul+0x144>)
  26:	f7ff fffe 	bl	0 <__aeabi_dmul>
  2a:	4602      	mov	r2, r0
  2c:	460b      	mov	r3, r1
  2e:	4610      	mov	r0, r2
  30:	4619      	mov	r1, r3
  32:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  36:	4603      	mov	r3, r0
  38:	b29a      	uxth	r2, r3
  3a:	4b4a      	ldr	r3, [pc, #296]	; (164 <UpdatePulseSequence+0x164>)
  3c:	819a      	strh	r2, [r3, #12]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:677
        PulseSeq.delay1_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay1_microseconds);
  3e:	4b49      	ldr	r3, [pc, #292]	; (164 <UpdatePulseSequence+0x164>)
  40:	8a1b      	ldrh	r3, [r3, #16]
  42:	ee07 3a10 	vmov	s14, r3
  46:	eef8 7a47 	vcvt.f32.u32	s15, s14
  4a:	ee17 0a90 	vmov	r0, s15
  4e:	f7ff fffe 	bl	0 <__aeabi_f2d>
  52:	4602      	mov	r2, r0
  54:	460b      	mov	r3, r1
  56:	4610      	mov	r0, r2
  58:	4619      	mov	r1, r3
  5a:	f04f 0200 	mov.w	r2, #0
  5e:	4b42      	ldr	r3, [pc, #264]	; (10c <__aeabi_dmul+0x10c>)
  60:	f7ff fffe 	bl	0 <__aeabi_dmul>
  64:	4602      	mov	r2, r0
  66:	460b      	mov	r3, r1
  68:	4610      	mov	r0, r2
  6a:	4619      	mov	r1, r3
  6c:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  70:	4603      	mov	r3, r0
  72:	b29a      	uxth	r2, r3
  74:	4b3b      	ldr	r3, [pc, #236]	; (164 <UpdatePulseSequence+0x164>)
  76:	825a      	strh	r2, [r3, #18]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:678
        PulseSeq.delay2_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay2_microseconds);
  78:	4b3a      	ldr	r3, [pc, #232]	; (164 <UpdatePulseSequence+0x164>)
  7a:	8adb      	ldrh	r3, [r3, #22]
  7c:	ee07 3a10 	vmov	s14, r3
  80:	eef8 7a47 	vcvt.f32.u32	s15, s14
  84:	ee17 0a90 	vmov	r0, s15
  88:	f7ff fffe 	bl	0 <__aeabi_f2d>
  8c:	4602      	mov	r2, r0
  8e:	460b      	mov	r3, r1
  90:	4610      	mov	r0, r2
  92:	4619      	mov	r1, r3
  94:	f04f 0200 	mov.w	r2, #0
  98:	4b33      	ldr	r3, [pc, #204]	; (d0 <__aeabi_dmul+0xd0>)
  9a:	f7ff fffe 	bl	0 <__aeabi_dmul>
  9e:	4602      	mov	r2, r0
  a0:	460b      	mov	r3, r1
  a2:	4610      	mov	r0, r2
  a4:	4619      	mov	r1, r3
  a6:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  aa:	4603      	mov	r3, r0
  ac:	b29a      	uxth	r2, r3
  ae:	4b2d      	ldr	r3, [pc, #180]	; (164 <UpdatePulseSequence+0x164>)
  b0:	831a      	strh	r2, [r3, #24]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:679
        PulseSeq.delay3_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay3_microseconds);     
  b2:	4b2c      	ldr	r3, [pc, #176]	; (164 <UpdatePulseSequence+0x164>)
  b4:	8b9b      	ldrh	r3, [r3, #28]
  b6:	ee07 3a10 	vmov	s14, r3
  ba:	eef8 7a47 	vcvt.f32.u32	s15, s14
  be:	ee17 0a90 	vmov	r0, s15
  c2:	f7ff fffe 	bl	0 <__aeabi_f2d>
  c6:	4602      	mov	r2, r0
  c8:	460b      	mov	r3, r1
  ca:	4610      	mov	r0, r2
  cc:	4619      	mov	r1, r3
  ce:	f04f 0200 	mov.w	r2, #0
  d2:	4b25      	ldr	r3, [pc, #148]	; (98 <__aeabi_dmul+0x98>)
  d4:	f7ff fffe 	bl	0 <__aeabi_dmul>
  d8:	4602      	mov	r2, r0
  da:	460b      	mov	r3, r1
  dc:	4610      	mov	r0, r2
  de:	4619      	mov	r1, r3
  e0:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  e4:	4603      	mov	r3, r0
  e6:	b29a      	uxth	r2, r3
  e8:	4b1e      	ldr	r3, [pc, #120]	; (164 <UpdatePulseSequence+0x164>)
  ea:	83da      	strh	r2, [r3, #30]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:681
        PulseSeq.delay_between_sequences_loop_counts
                                    = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay_between_sequences_microseconds);     
  ec:	4b1d      	ldr	r3, [pc, #116]	; (164 <UpdatePulseSequence+0x164>)
  ee:	88db      	ldrh	r3, [r3, #6]
  f0:	ee07 3a10 	vmov	s14, r3
  f4:	eef8 7a47 	vcvt.f32.u32	s15, s14
  f8:	ee17 0a90 	vmov	r0, s15
  fc:	f7ff fffe 	bl	0 <__aeabi_f2d>
 100:	4602      	mov	r2, r0
 102:	460b      	mov	r3, r1
 104:	4610      	mov	r0, r2
 106:	4619      	mov	r1, r3
 108:	f04f 0200 	mov.w	r2, #0
 10c:	4b16      	ldr	r3, [pc, #88]	; (5c <__aeabi_dmul+0x5c>)
 10e:	f7ff fffe 	bl	0 <__aeabi_dmul>
 112:	4602      	mov	r2, r0
 114:	460b      	mov	r3, r1
 116:	4610      	mov	r0, r2
 118:	4619      	mov	r1, r3
 11a:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
 11e:	4603      	mov	r3, r0
 120:	b29a      	uxth	r2, r3
 122:	4b10      	ldr	r3, [pc, #64]	; (164 <UpdatePulseSequence+0x164>)
 124:	811a      	strh	r2, [r3, #8]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:683
    
        switch(PulseSeq.frequency)
 126:	4b0f      	ldr	r3, [pc, #60]	; (164 <UpdatePulseSequence+0x164>)
 128:	781b      	ldrb	r3, [r3, #0]
 12a:	2b02      	cmp	r3, #2
 12c:	d00a      	beq.n	144 <UpdatePulseSequence+0x144>
 12e:	2b03      	cmp	r3, #3
 130:	d00f      	beq.n	152 <UpdatePulseSequence+0x152>
 132:	2b01      	cmp	r3, #1
 134:	d114      	bne.n	160 <UpdatePulseSequence+0x160>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:686
        {
            case FREQUENCY_1KHZ:    
                    PulseSeq.frequency_divider = 3;     
 136:	4b0b      	ldr	r3, [pc, #44]	; (164 <UpdatePulseSequence+0x164>)
 138:	2203      	movs	r2, #3
 13a:	805a      	strh	r2, [r3, #2]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:687
                    PulseSeq.sequence_multiplicity = SEQUENCEMULTIPLICITY_SINGLE;
 13c:	4b09      	ldr	r3, [pc, #36]	; (164 <UpdatePulseSequence+0x164>)
 13e:	2200      	movs	r2, #0
 140:	711a      	strb	r2, [r3, #4]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:688
                    break; 
 142:	e00d      	b.n	160 <UpdatePulseSequence+0x160>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:690
            case FREQUENCY_2KHZ:    
                    PulseSeq.frequency_divider = 3;     
 144:	4b07      	ldr	r3, [pc, #28]	; (164 <UpdatePulseSequence+0x164>)
 146:	2203      	movs	r2, #3
 148:	805a      	strh	r2, [r3, #2]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:691
                    PulseSeq.sequence_multiplicity = SEQUENCEMULTIPLICITY_DOUBLE;
 14a:	4b06      	ldr	r3, [pc, #24]	; (164 <UpdatePulseSequence+0x164>)
 14c:	2201      	movs	r2, #1
 14e:	711a      	strb	r2, [r3, #4]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:692
                    break;
 150:	e006      	b.n	160 <UpdatePulseSequence+0x160>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:694
            case FREQUENCY_3KHZ:    
                    PulseSeq.frequency_divider = 1;     
 152:	4b04      	ldr	r3, [pc, #16]	; (164 <UpdatePulseSequence+0x164>)
 154:	2201      	movs	r2, #1
 156:	805a      	strh	r2, [r3, #2]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:695
                    PulseSeq.sequence_multiplicity = SEQUENCEMULTIPLICITY_SINGLE;
 158:	4b02      	ldr	r3, [pc, #8]	; (164 <UpdatePulseSequence+0x164>)
 15a:	2200      	movs	r2, #0
 15c:	711a      	strb	r2, [r3, #4]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:696
                    break;
 15e:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:698
        }
    }
 160:	bd80      	pop	{r7, pc}
 162:	bf00      	nop
 164:	00000004 	.word	0x00000004
 168:	402e0000 	.word	0x402e0000

Disassembly of section .text.GeneratePulseSequenceAndReadCAE:

00000000 <GeneratePulseSequenceAndReadCAE>:
GeneratePulseSequenceAndReadCAE():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:716

* Input          : None
* Return         : None
*******************************************************************************/
static void GeneratePulseSequenceAndReadCAE()
    {u32 i;    
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:719
     u32 ad_value_0_to_4095;
    
    SetOutputVoltage(ZERO_VOLTAGE);
   6:	2002      	movs	r0, #2
   8:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:720
    WHILE_DELAY_LOOP(PulseSeq.delay0_loop_counts)
   c:	4b23      	ldr	r3, [pc, #140]	; (9c <GeneratePulseSequenceAndReadCAE+0x9c>)
   e:	899b      	ldrh	r3, [r3, #12]
  10:	607b      	str	r3, [r7, #4]
  12:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:720 (discriminator 1)
  14:	687b      	ldr	r3, [r7, #4]
  16:	1e5a      	subs	r2, r3, #1
  18:	607a      	str	r2, [r7, #4]
  1a:	2b00      	cmp	r3, #0
  1c:	d1fa      	bne.n	14 <GeneratePulseSequenceAndReadCAE+0x14>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:722

    if(PulseSeq.delay1_loop_counts>0)
  1e:	4b1f      	ldr	r3, [pc, #124]	; (9c <GeneratePulseSequenceAndReadCAE+0x9c>)
  20:	8a5b      	ldrh	r3, [r3, #18]
  22:	2b00      	cmp	r3, #0
  24:	d017      	beq.n	56 <GeneratePulseSequenceAndReadCAE+0x56>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:724
    {    
        SetOutputVoltage(POSITIVE_VOLTAGE_MAX);
  26:	2000      	movs	r0, #0
  28:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:726
    
        CX_Read(CX_ADC1, &ad_value_0_to_4095, 0);        
  2c:	4b1c      	ldr	r3, [pc, #112]	; (a0 <GeneratePulseSequenceAndReadCAE+0xa0>)
  2e:	681b      	ldr	r3, [r3, #0]
  30:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
  34:	463a      	mov	r2, r7
  36:	2023      	movs	r0, #35	; 0x23
  38:	4611      	mov	r1, r2
  3a:	2200      	movs	r2, #0
  3c:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:727
        Readout.CAE1 = ad_value_0_to_4095;    
  3e:	683a      	ldr	r2, [r7, #0]
  40:	4b18      	ldr	r3, [pc, #96]	; (a4 <GeneratePulseSequenceAndReadCAE+0xa4>)
  42:	601a      	str	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:729
    
        WHILE_DELAY_LOOP(PulseSeq.delay1_loop_counts)        
  44:	4b15      	ldr	r3, [pc, #84]	; (9c <GeneratePulseSequenceAndReadCAE+0x9c>)
  46:	8a5b      	ldrh	r3, [r3, #18]
  48:	607b      	str	r3, [r7, #4]
  4a:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:729 (discriminator 1)
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	1e5a      	subs	r2, r3, #1
  50:	607a      	str	r2, [r7, #4]
  52:	2b00      	cmp	r3, #0
  54:	d1fa      	bne.n	4c <GeneratePulseSequenceAndReadCAE+0x4c>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:732
    }
        
    SetOutputVoltage(ZERO_VOLTAGE);
  56:	2002      	movs	r0, #2
  58:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:734
    
    WHILE_DELAY_LOOP(PulseSeq.delay2_loop_counts)    
  5c:	4b0f      	ldr	r3, [pc, #60]	; (9c <GeneratePulseSequenceAndReadCAE+0x9c>)
  5e:	8b1b      	ldrh	r3, [r3, #24]
  60:	607b      	str	r3, [r7, #4]
  62:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:734 (discriminator 1)
  64:	687b      	ldr	r3, [r7, #4]
  66:	1e5a      	subs	r2, r3, #1
  68:	607a      	str	r2, [r7, #4]
  6a:	2b00      	cmp	r3, #0
  6c:	d1fa      	bne.n	64 <GeneratePulseSequenceAndReadCAE+0x64>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:736
   
    if(PulseSeq.delay3_loop_counts>0)
  6e:	4b0b      	ldr	r3, [pc, #44]	; (9c <GeneratePulseSequenceAndReadCAE+0x9c>)
  70:	8bdb      	ldrh	r3, [r3, #30]
  72:	2b00      	cmp	r3, #0
  74:	d00b      	beq.n	8e <GeneratePulseSequenceAndReadCAE+0x8e>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:738
    {    
        SetOutputVoltage(NEGATIVE_VOLTAGE_MAX);
  76:	2004      	movs	r0, #4
  78:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:739
        WHILE_DELAY_LOOP(PulseSeq.delay3_loop_counts)    
  7c:	4b07      	ldr	r3, [pc, #28]	; (9c <GeneratePulseSequenceAndReadCAE+0x9c>)
  7e:	8bdb      	ldrh	r3, [r3, #30]
  80:	607b      	str	r3, [r7, #4]
  82:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:739 (discriminator 1)
  84:	687b      	ldr	r3, [r7, #4]
  86:	1e5a      	subs	r2, r3, #1
  88:	607a      	str	r2, [r7, #4]
  8a:	2b00      	cmp	r3, #0
  8c:	d1fa      	bne.n	84 <GeneratePulseSequenceAndReadCAE+0x84>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:742
    }
    
    SetOutputVoltage(ZERO_VOLTAGE);                  
  8e:	2002      	movs	r0, #2
  90:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:743
    }   
  94:	3708      	adds	r7, #8
  96:	46bd      	mov	sp, r7
  98:	bd80      	pop	{r7, pc}
  9a:	bf00      	nop
  9c:	00000004 	.word	0x00000004
  a0:	00000000 	.word	0x00000000
  a4:	00000028 	.word	0x00000028

Disassembly of section .text.SetOutputVoltage:

00000000 <SetOutputVoltage>:
SetOutputVoltage():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:757

* Input          : OutputVoltage_code oVcode
* Return         : None
*******************************************************************************/
static void SetOutputVoltage(OutputVoltage_code oVcode)
    {
   0:	b580      	push	{r7, lr}
   2:	b084      	sub	sp, #16
   4:	af00      	add	r7, sp, #0
   6:	4603      	mov	r3, r0
   8:	71fb      	strb	r3, [r7, #7]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:761
  
        static u8 controlByteForMAX5439=0;

        volatile u32 nb_byteSent = 1;
   a:	2301      	movs	r3, #1
   c:	60fb      	str	r3, [r7, #12]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:763
        
        switch(oVcode)
   e:	79fb      	ldrb	r3, [r7, #7]
  10:	2b04      	cmp	r3, #4
  12:	d821      	bhi.n	58 <SetOutputVoltage+0x58>
  14:	a201      	add	r2, pc, #4	; (adr r2, 1c <SetOutputVoltage+0x1c>)
  16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  1a:	bf00      	nop
  1c:	00000031 	.word	0x00000031
  20:	00000039 	.word	0x00000039
  24:	00000041 	.word	0x00000041
  28:	00000049 	.word	0x00000049
  2c:	00000051 	.word	0x00000051
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:765
        {
            case POSITIVE_VOLTAGE_MAX:      controlByteForMAX5439=127;  break;
  30:	4b17      	ldr	r3, [pc, #92]	; (90 <SetOutputVoltage+0x90>)
  32:	227f      	movs	r2, #127	; 0x7f
  34:	701a      	strb	r2, [r3, #0]
  36:	e00f      	b.n	58 <SetOutputVoltage+0x58>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:766
            case POSITIVE_VOLTAGE_HALF:     controlByteForMAX5439=95;   break;
  38:	4b15      	ldr	r3, [pc, #84]	; (90 <SetOutputVoltage+0x90>)
  3a:	225f      	movs	r2, #95	; 0x5f
  3c:	701a      	strb	r2, [r3, #0]
  3e:	e00b      	b.n	58 <SetOutputVoltage+0x58>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:767
            case ZERO_VOLTAGE:              controlByteForMAX5439=63;   break;
  40:	4b13      	ldr	r3, [pc, #76]	; (90 <SetOutputVoltage+0x90>)
  42:	223f      	movs	r2, #63	; 0x3f
  44:	701a      	strb	r2, [r3, #0]
  46:	e007      	b.n	58 <SetOutputVoltage+0x58>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:768
            case NEGATIVE_VOLTAGE_HALF:     controlByteForMAX5439=31;   break;
  48:	4b11      	ldr	r3, [pc, #68]	; (90 <SetOutputVoltage+0x90>)
  4a:	221f      	movs	r2, #31
  4c:	701a      	strb	r2, [r3, #0]
  4e:	e003      	b.n	58 <SetOutputVoltage+0x58>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:769
            case NEGATIVE_VOLTAGE_MAX:      controlByteForMAX5439=0;    break;
  50:	4b0f      	ldr	r3, [pc, #60]	; (90 <SetOutputVoltage+0x90>)
  52:	2200      	movs	r2, #0
  54:	701a      	strb	r2, [r3, #0]
  56:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:772
        }
    
        CX_Write(CX_GPIO_PIN8,CX_GPIO_LOW,0);     
  58:	4b0e      	ldr	r3, [pc, #56]	; (94 <SetOutputVoltage+0x94>)
  5a:	681b      	ldr	r3, [r3, #0]
  5c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  60:	2008      	movs	r0, #8
  62:	2100      	movs	r1, #0
  64:	2200      	movs	r2, #0
  66:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:774

        CX_Write(CX_SPI,&controlByteForMAX5439,&nb_byteSent);
  68:	4b0a      	ldr	r3, [pc, #40]	; (94 <SetOutputVoltage+0x94>)
  6a:	681b      	ldr	r3, [r3, #0]
  6c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  70:	4907      	ldr	r1, [pc, #28]	; (90 <SetOutputVoltage+0x90>)
  72:	f107 020c 	add.w	r2, r7, #12
  76:	2021      	movs	r0, #33	; 0x21
  78:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:775
        CX_Write(CX_GPIO_PIN8,CX_GPIO_HIGH,0);  //IH141230 this rising edge of the NSS signal actually sets the wiper 
  7a:	4b06      	ldr	r3, [pc, #24]	; (94 <SetOutputVoltage+0x94>)
  7c:	681b      	ldr	r3, [r3, #0]
  7e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  82:	2008      	movs	r0, #8
  84:	2101      	movs	r1, #1
  86:	2200      	movs	r2, #0
  88:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:780
                                                // (see MAX5439 datasheet)
    
        //IH140912 we do not wait for end of the transmission here, neither do we check the success
    
    }
  8a:	3710      	adds	r7, #16
  8c:	46bd      	mov	sp, r7
  8e:	bd80      	pop	{r7, pc}
  90:	00000144 	.word	0x00000144
  94:	00000000 	.word	0x00000000

Disassembly of section .text.GUI:

00000000 <GUI>:
GUI():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:790
* Input          :  GUIaction
                    readout1
* Return         : None
*******************************************************************************/
static void GUI(GUIaction_code GUIaction, u16 readout1)
    {
   0:	b590      	push	{r4, r7, lr}
   2:	b08f      	sub	sp, #60	; 0x3c
   4:	af02      	add	r7, sp, #8
   6:	4602      	mov	r2, r0
   8:	460b      	mov	r3, r1
   a:	71fa      	strb	r2, [r7, #7]
   c:	80bb      	strh	r3, [r7, #4]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:806
       
#define STIM_SINGLE_BAR_WIDTH     8
    
    static StimState_code lastStimState = STIMSTATE_RUN;
    static u16 barPosX = 0;
    u16 barWidth = STIM_SINGLE_BAR_WIDTH;
   e:	2308      	movs	r3, #8
  10:	85fb      	strh	r3, [r7, #46]	; 0x2e
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:809
    
        
    float readoutYScalingFactor = 0.1;  //was 1.1 for debugging
  12:	4b89      	ldr	r3, [pc, #548]	; (238 <GUI+0x238>)
  14:	62bb      	str	r3, [r7, #40]	; 0x28
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:811
    
        switch(GUIaction)
  16:	79fb      	ldrb	r3, [r7, #7]
  18:	2b03      	cmp	r3, #3
  1a:	f200 816c 	bhi.w	2f6 <GUI+0x2f6>
  1e:	a201      	add	r2, pc, #4	; (adr r2, 24 <GUI+0x24>)
  20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  24:	00000035 	.word	0x00000035
  28:	000000b3 	.word	0x000000b3
  2c:	00000035 	.word	0x00000035
  30:	00000251 	.word	0x00000251
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:816
        {
        case GUI_CLEAR:         //IH140319 currently identical with GUI_INITIALIZE
        case GUI_INITIALIZE:
            
            lastStimState = STIMSTATE_RUN;
  34:	4b81      	ldr	r3, [pc, #516]	; (23c <GUI+0x23c>)
  36:	2201      	movs	r2, #1
  38:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:817
            barPosX = 0;
  3a:	4b81      	ldr	r3, [pc, #516]	; (240 <GUI+0x240>)
  3c:	2200      	movs	r2, #0
  3e:	801a      	strh	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:821
                            
            // graphics
            // These are default values
            DRAW_SetCharMagniCoeff(1);
  40:	4b80      	ldr	r3, [pc, #512]	; (244 <GUI+0x244>)
  42:	681b      	ldr	r3, [r3, #0]
  44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  48:	2001      	movs	r0, #1
  4a:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:822
            DRAW_SetTextColor(RGB_WHITE);     
  4c:	4b7d      	ldr	r3, [pc, #500]	; (244 <GUI+0x244>)
  4e:	681b      	ldr	r3, [r3, #0]
  50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  54:	f64f 70ff 	movw	r0, #65535	; 0xffff
  58:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:823
            DRAW_SetBGndColor(STIM_LOWERPANEL_COLOR);        
  5a:	4b7a      	ldr	r3, [pc, #488]	; (244 <GUI+0x244>)
  5c:	681b      	ldr	r3, [r3, #0]
  5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
  62:	f248 0001 	movw	r0, #32769	; 0x8001
  66:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:826
                        
            //Lower panel
            LCD_FillRect( 
  68:	4b76      	ldr	r3, [pc, #472]	; (244 <GUI+0x244>)
  6a:	681b      	ldr	r3, [r3, #0]
  6c:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
  70:	f248 0301 	movw	r3, #32769	; 0x8001
  74:	9300      	str	r3, [sp, #0]
  76:	2000      	movs	r0, #0
  78:	2100      	movs	r1, #0
  7a:	22f0      	movs	r2, #240	; 0xf0
  7c:	231e      	movs	r3, #30
  7e:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:832
                0, 0, 
                SCREEN_WIDTH, STIM_LOWERPANEL_HEIGHT, 
                STIM_LOWERPANEL_COLOR );
        
            //Middle panel
            LCD_FillRect(
  80:	4b70      	ldr	r3, [pc, #448]	; (244 <GUI+0x244>)
  82:	681b      	ldr	r3, [r3, #0]
  84:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
  88:	f246 1308 	movw	r3, #24840	; 0x6108
  8c:	9300      	str	r3, [sp, #0]
  8e:	2000      	movs	r0, #0
  90:	211e      	movs	r1, #30
  92:	22f0      	movs	r2, #240	; 0xf0
  94:	2396      	movs	r3, #150	; 0x96
  96:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:838
                0, STIM_LOWERPANEL_HEIGHT, 
                SCREEN_WIDTH, STIM_MIDDLEPANEL_HEIGHT,                 
                STIM_MIDDLEPANEL_COLOR );
              
            //Upper panel
            LCD_FillRect(
  98:	4b6a      	ldr	r3, [pc, #424]	; (244 <GUI+0x244>)
  9a:	681b      	ldr	r3, [r3, #0]
  9c:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
  a0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
  a4:	9300      	str	r3, [sp, #0]
  a6:	2000      	movs	r0, #0
  a8:	21b4      	movs	r1, #180	; 0xb4
  aa:	22f0      	movs	r2, #240	; 0xf0
  ac:	233c      	movs	r3, #60	; 0x3c
  ae:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:844
                0, SCREEN_HEIGHT-STIM_UPPERPANEL_HEIGHT, 
                SCREEN_WIDTH, 
                STIM_UPPERPANEL_HEIGHT, 
                STIM_UPPERPANEL_COLOR );
                    
            break;
  b0:	e121      	b.n	2f6 <GUI+0x2f6>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:851
        case GUI_NORMAL_UPDATE:
            
            // display readout figure
            {
            u8 str[30];        
            UTIL_int2str( str, Readout.CAE1, 4, FALSE);    
  b2:	4b64      	ldr	r3, [pc, #400]	; (244 <GUI+0x244>)
  b4:	681b      	ldr	r3, [r3, #0]
  b6:	f8d3 42cc 	ldr.w	r4, [r3, #716]	; 0x2cc
  ba:	f107 0208 	add.w	r2, r7, #8
  be:	4b62      	ldr	r3, [pc, #392]	; (248 <GUI+0x248>)
  c0:	681b      	ldr	r3, [r3, #0]
  c2:	4610      	mov	r0, r2
  c4:	4619      	mov	r1, r3
  c6:	2204      	movs	r2, #4
  c8:	2300      	movs	r3, #0
  ca:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:853
            
            DRAW_SetCharMagniCoeff(4);            
  cc:	4b5d      	ldr	r3, [pc, #372]	; (244 <GUI+0x244>)
  ce:	681b      	ldr	r3, [r3, #0]
  d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  d4:	2004      	movs	r0, #4
  d6:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:854
            DRAW_SetTextColor(RGB_YELLOW);     
  d8:	4b5a      	ldr	r3, [pc, #360]	; (244 <GUI+0x244>)
  da:	681b      	ldr	r3, [r3, #0]
  dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  e0:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
  e4:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:855
            DRAW_SetBGndColor(STIM_UPPERPANEL_COLOR);        
  e6:	4b57      	ldr	r3, [pc, #348]	; (244 <GUI+0x244>)
  e8:	681b      	ldr	r3, [r3, #0]
  ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
  ee:	f44f 5088 	mov.w	r0, #4352	; 0x1100
  f2:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:857
            
            DRAW_DisplayStringWithMode( 0,180,str, 0, NORMAL_TEXT, LEFT);            
  f4:	4b53      	ldr	r3, [pc, #332]	; (244 <GUI+0x244>)
  f6:	681b      	ldr	r3, [r3, #0]
  f8:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
  fc:	f107 0308 	add.w	r3, r7, #8
 100:	2200      	movs	r2, #0
 102:	9200      	str	r2, [sp, #0]
 104:	2200      	movs	r2, #0
 106:	9201      	str	r2, [sp, #4]
 108:	2000      	movs	r0, #0
 10a:	21b4      	movs	r1, #180	; 0xb4
 10c:	461a      	mov	r2, r3
 10e:	2300      	movs	r3, #0
 110:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:859
            
            DRAW_SetCharMagniCoeff(1);            
 112:	4b4c      	ldr	r3, [pc, #304]	; (244 <GUI+0x244>)
 114:	681b      	ldr	r3, [r3, #0]
 116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 11a:	2001      	movs	r0, #1
 11c:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:860
            DRAW_SetTextColor(RGB_WHITE);     
 11e:	4b49      	ldr	r3, [pc, #292]	; (244 <GUI+0x244>)
 120:	681b      	ldr	r3, [r3, #0]
 122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 126:	f64f 70ff 	movw	r0, #65535	; 0xffff
 12a:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:861
            DRAW_SetBGndColor(STIM_LOWERPANEL_COLOR);        
 12c:	4b45      	ldr	r3, [pc, #276]	; (244 <GUI+0x244>)
 12e:	681b      	ldr	r3, [r3, #0]
 130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 134:	f248 0001 	movw	r0, #32769	; 0x8001
 138:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:865
            }
        
            // display graphics
            switch(StimState)
 13a:	4b44      	ldr	r3, [pc, #272]	; (24c <GUI+0x24c>)
 13c:	781b      	ldrb	r3, [r3, #0]
 13e:	2b03      	cmp	r3, #3
 140:	d872      	bhi.n	228 <GUI+0x228>
 142:	a201      	add	r2, pc, #4	; (adr r2, 148 <GUI+0x148>)
 144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 148:	00000159 	.word	0x00000159
 14c:	00000181 	.word	0x00000181
 150:	00000159 	.word	0x00000159
 154:	00000181 	.word	0x00000181
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:869
            {
            case STIMSTATE_IDLE:  
            case STIMSTATE_WAITING_FOR_RUN:  
                if(lastStimState!=STIMSTATE_IDLE)
 158:	4b38      	ldr	r3, [pc, #224]	; (23c <GUI+0x23c>)
 15a:	781b      	ldrb	r3, [r3, #0]
 15c:	2b00      	cmp	r3, #0
 15e:	d00b      	beq.n	178 <GUI+0x178>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:872
                    {
                    //Clean middle panel
                    LCD_FillRect(
 160:	4b38      	ldr	r3, [pc, #224]	; (244 <GUI+0x244>)
 162:	681b      	ldr	r3, [r3, #0]
 164:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 168:	f246 1308 	movw	r3, #24840	; 0x6108
 16c:	9300      	str	r3, [sp, #0]
 16e:	2000      	movs	r0, #0
 170:	211e      	movs	r1, #30
 172:	22f0      	movs	r2, #240	; 0xf0
 174:	2396      	movs	r3, #150	; 0x96
 176:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:877
                        0, STIM_LOWERPANEL_HEIGHT, 
                        SCREEN_WIDTH, STIM_MIDDLEPANEL_HEIGHT,
                        STIM_MIDDLEPANEL_COLOR );                                                                           
                    }
                lastStimState = STIMSTATE_IDLE;
 178:	4b30      	ldr	r3, [pc, #192]	; (23c <GUI+0x23c>)
 17a:	2200      	movs	r2, #0
 17c:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:878
                break;
 17e:	e053      	b.n	228 <GUI+0x228>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:882
        
            case STIMSTATE_RUN:                 
            case STIMSTATE_WAITING_FOR_IDLE:  
                if(lastStimState!=STIMSTATE_RUN)
 180:	4b2e      	ldr	r3, [pc, #184]	; (23c <GUI+0x23c>)
 182:	781b      	ldrb	r3, [r3, #0]
 184:	2b01      	cmp	r3, #1
 186:	d00f      	beq.n	1a8 <GUI+0x1a8>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:885
                    {
                    //Clean middle panel
                    LCD_FillRect(
 188:	4b2e      	ldr	r3, [pc, #184]	; (244 <GUI+0x244>)
 18a:	681b      	ldr	r3, [r3, #0]
 18c:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 190:	f246 1308 	movw	r3, #24840	; 0x6108
 194:	9300      	str	r3, [sp, #0]
 196:	2000      	movs	r0, #0
 198:	211e      	movs	r1, #30
 19a:	22f0      	movs	r2, #240	; 0xf0
 19c:	2396      	movs	r3, #150	; 0x96
 19e:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:890
                        0, STIM_LOWERPANEL_HEIGHT, 
                        SCREEN_WIDTH, STIM_MIDDLEPANEL_HEIGHT,                        
                        STIM_MIDDLEPANEL_COLOR );
                    
                    barPosX=0;
 1a0:	4b27      	ldr	r3, [pc, #156]	; (240 <GUI+0x240>)
 1a2:	2200      	movs	r2, #0
 1a4:	801a      	strh	r2, [r3, #0]
 1a6:	e033      	b.n	210 <GUI+0x210>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:894
                    }
                else
                    {
                    u16 barHeight = Readout.CAE1 * readoutYScalingFactor;
 1a8:	4b27      	ldr	r3, [pc, #156]	; (248 <GUI+0x248>)
 1aa:	681b      	ldr	r3, [r3, #0]
 1ac:	ee07 3a90 	vmov	s15, r3
 1b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 1b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 1bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 1c0:	ee17 3a90 	vmov	r3, s15
 1c4:	84fb      	strh	r3, [r7, #38]	; 0x26
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:899
                    if(barHeight>STIM_MIDDLEPANEL_HEIGHT)
                        {
                        barHeight>STIM_MIDDLEPANEL_HEIGHT;
                        }
                    LCD_FillRect(
 1c6:	4b1f      	ldr	r3, [pc, #124]	; (244 <GUI+0x244>)
 1c8:	681b      	ldr	r3, [r3, #0]
 1ca:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 1ce:	4b1c      	ldr	r3, [pc, #112]	; (240 <GUI+0x240>)
 1d0:	881b      	ldrh	r3, [r3, #0]
 1d2:	461a      	mov	r2, r3
 1d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 1d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 1da:	9100      	str	r1, [sp, #0]
 1dc:	4610      	mov	r0, r2
 1de:	211e      	movs	r1, #30
 1e0:	461a      	mov	r2, r3
 1e2:	2396      	movs	r3, #150	; 0x96
 1e4:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:903
                        barPosX, STIM_LOWERPANEL_HEIGHT, 
                        barWidth, STIM_MIDDLEPANEL_HEIGHT,                        
                        STIM_BARBG_COLOR );                    
                    LCD_FillRect(
 1e6:	4b17      	ldr	r3, [pc, #92]	; (244 <GUI+0x244>)
 1e8:	681b      	ldr	r3, [r3, #0]
 1ea:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 1ee:	4b14      	ldr	r3, [pc, #80]	; (240 <GUI+0x240>)
 1f0:	881b      	ldrh	r3, [r3, #0]
 1f2:	4619      	mov	r1, r3
 1f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 1f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 1f8:	20f8      	movs	r0, #248	; 0xf8
 1fa:	9000      	str	r0, [sp, #0]
 1fc:	4608      	mov	r0, r1
 1fe:	211e      	movs	r1, #30
 200:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:907
                        barPosX, STIM_LOWERPANEL_HEIGHT, 
                        barWidth, barHeight,                        
                        STIM_BARFG_COLOR );                    
                    barPosX += barWidth;
 202:	4b0f      	ldr	r3, [pc, #60]	; (240 <GUI+0x240>)
 204:	881a      	ldrh	r2, [r3, #0]
 206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 208:	4413      	add	r3, r2
 20a:	b29a      	uxth	r2, r3
 20c:	4b0c      	ldr	r3, [pc, #48]	; (240 <GUI+0x240>)
 20e:	801a      	strh	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:914
                    if(barPosX>SCREEN_WIDTH)
                        {
                        barPosX;
                        }
                    }
                lastStimState = STIMSTATE_RUN;                
 210:	4b0a      	ldr	r3, [pc, #40]	; (23c <GUI+0x23c>)
 212:	2201      	movs	r2, #1
 214:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:915
                if(barPosX>SCREEN_WIDTH)
 216:	4b0a      	ldr	r3, [pc, #40]	; (240 <GUI+0x240>)
 218:	881b      	ldrh	r3, [r3, #0]
 21a:	2bf0      	cmp	r3, #240	; 0xf0
 21c:	d903      	bls.n	226 <GUI+0x226>
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:917
                        {
                        lastStimState = STIMSTATE_IDLE;  //begin new graphics screen                
 21e:	4b07      	ldr	r3, [pc, #28]	; (23c <GUI+0x23c>)
 220:	2200      	movs	r2, #0
 222:	701a      	strb	r2, [r3, #0]
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:919
                        }
                break;
 224:	e7ff      	b.n	226 <GUI+0x226>
 226:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:925
                                    
            
            }        
                
            // display time
            DRAW_DisplayTime( 10, 10);            
 228:	4b06      	ldr	r3, [pc, #24]	; (244 <GUI+0x244>)
 22a:	681b      	ldr	r3, [r3, #0]
 22c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 230:	200a      	movs	r0, #10
 232:	210a      	movs	r1, #10
 234:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:926
            break;            
 236:	e05e      	b.n	2f6 <GUI+0x2f6>
 238:	3dcccccd 	.word	0x3dcccccd
 23c:	000001ec 	.word	0x000001ec
 240:	00000146 	.word	0x00000146
 244:	00000000 	.word	0x00000000
 248:	00000028 	.word	0x00000028
 24c:	0000002c 	.word	0x0000002c
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:930
        
        case GUI_INTRO_SCREEN:            
            
            DRAW_SetCharMagniCoeff(2);
 250:	4b2a      	ldr	r3, [pc, #168]	; (2fc <GUI+0x2fc>)
 252:	681b      	ldr	r3, [r3, #0]
 254:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 258:	2002      	movs	r0, #2
 25a:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:931
            DRAW_SetTextColor(RGB_GREEN);                 
 25c:	4b27      	ldr	r3, [pc, #156]	; (2fc <GUI+0x2fc>)
 25e:	681b      	ldr	r3, [r3, #0]
 260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 264:	f24e 0007 	movw	r0, #57351	; 0xe007
 268:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:933
            
            LCD_FillRect(
 26a:	4b24      	ldr	r3, [pc, #144]	; (2fc <GUI+0x2fc>)
 26c:	681b      	ldr	r3, [r3, #0]
 26e:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 272:	f640 03fc 	movw	r3, #2300	; 0x8fc
 276:	9300      	str	r3, [sp, #0]
 278:	2000      	movs	r0, #0
 27a:	2100      	movs	r1, #0
 27c:	22f0      	movs	r2, #240	; 0xf0
 27e:	23f0      	movs	r3, #240	; 0xf0
 280:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:938
            0, 0, 
            SCREEN_WIDTH, SCREEN_HEIGHT,                 
            RGB_ORANGE );
            
            DRAW_DisplayStringWithMode( 0,180,"STiM32", ALL_SCREEN, INVERTED_TEXT, CENTER);            
 282:	4b1e      	ldr	r3, [pc, #120]	; (2fc <GUI+0x2fc>)
 284:	681b      	ldr	r3, [r3, #0]
 286:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
 28a:	4b1d      	ldr	r3, [pc, #116]	; (300 <GUI+0x300>)
 28c:	2201      	movs	r2, #1
 28e:	9200      	str	r2, [sp, #0]
 290:	2201      	movs	r2, #1
 292:	9201      	str	r2, [sp, #4]
 294:	2000      	movs	r0, #0
 296:	21b4      	movs	r1, #180	; 0xb4
 298:	461a      	mov	r2, r3
 29a:	f04f 33ff 	mov.w	r3, #4294967295
 29e:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:939
            DRAW_SetCharMagniCoeff(1);
 2a0:	4b16      	ldr	r3, [pc, #88]	; (2fc <GUI+0x2fc>)
 2a2:	681b      	ldr	r3, [r3, #0]
 2a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 2a8:	2001      	movs	r0, #1
 2aa:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:940
            DRAW_DisplayStringWithMode( 0,160,STIM32_VERSION, ALL_SCREEN, INVERTED_TEXT, CENTER);            
 2ac:	4b13      	ldr	r3, [pc, #76]	; (2fc <GUI+0x2fc>)
 2ae:	681b      	ldr	r3, [r3, #0]
 2b0:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
 2b4:	4b13      	ldr	r3, [pc, #76]	; (304 <GUI+0x304>)
 2b6:	2201      	movs	r2, #1
 2b8:	9200      	str	r2, [sp, #0]
 2ba:	2201      	movs	r2, #1
 2bc:	9201      	str	r2, [sp, #4]
 2be:	2000      	movs	r0, #0
 2c0:	21a0      	movs	r1, #160	; 0xa0
 2c2:	461a      	mov	r2, r3
 2c4:	f04f 33ff 	mov.w	r3, #4294967295
 2c8:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:943
        
            //IH140321 TODO show battery status
            DRAW_SetCharMagniCoeff(1);
 2ca:	4b0c      	ldr	r3, [pc, #48]	; (2fc <GUI+0x2fc>)
 2cc:	681b      	ldr	r3, [r3, #0]
 2ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 2d2:	2001      	movs	r0, #1
 2d4:	4798      	blx	r3
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:944
            DRAW_DisplayStringWithMode( 0,100,"Battery: OK", ALL_SCREEN, NORMAL_TEXT, CENTER);            
 2d6:	4b09      	ldr	r3, [pc, #36]	; (2fc <GUI+0x2fc>)
 2d8:	681b      	ldr	r3, [r3, #0]
 2da:	f8d3 40dc 	ldr.w	r4, [r3, #220]	; 0xdc
 2de:	4b0a      	ldr	r3, [pc, #40]	; (308 <GUI+0x308>)
 2e0:	2200      	movs	r2, #0
 2e2:	9200      	str	r2, [sp, #0]
 2e4:	2201      	movs	r2, #1
 2e6:	9201      	str	r2, [sp, #4]
 2e8:	2000      	movs	r0, #0
 2ea:	2164      	movs	r1, #100	; 0x64
 2ec:	461a      	mov	r2, r3
 2ee:	f04f 33ff 	mov.w	r3, #4294967295
 2f2:	47a0      	blx	r4
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:945
            break;                                                     
 2f4:	bf00      	nop
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:947
        }
    }
 2f6:	3734      	adds	r7, #52	; 0x34
 2f8:	46bd      	mov	sp, r7
 2fa:	bd90      	pop	{r4, r7, pc}
 2fc:	00000000 	.word	0x00000000
 300:	0000008c 	.word	0x0000008c
 304:	00000094 	.word	0x00000094
 308:	0000009c 	.word	0x0000009c

Disassembly of section .text.SetAutorun:

00000000 <SetAutorun>:
SetAutorun():
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:956
* Description    : Sets the bit 7 in SYS2 backup register to autorun this application 
* Input          : None                     
* Return         : None
*******************************************************************************/
static void SetAutorun(void)
    {
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
C:\Users\igor.hollaender\Documents\GitHub\STiM32/STiM32.c:958
        //IH150107 TODO
    }
   4:	46bd      	mov	sp, r7
   6:	f85d 7b04 	ldr.w	r7, [sp], #4
   a:	4770      	bx	lr
