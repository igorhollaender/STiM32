
C:\Users\Igor\Documents\GitHub\STiM32\objdebug\STiM32.o:     file format elf32-littlearm
C:\Users\Igor\Documents\GitHub\STiM32\objdebug\STiM32.o


Disassembly of section .text.STIMULATOR_Handler:

00000000 <STIMULATOR_Handler>:
STIMULATOR_Handler():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:233
* Description    : Generates single pulse sequence and reads the feedback signal
* Input          : None
* Return         : Readout 
*******************************************************************************/
void STIMULATOR_Handler( void ) 
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:237
static u32 state_change_cnt = 0;
static u32 frequency_cnt = 0;

if((frequency_cnt++) % PulseSeq.frequency_divider)
   6:	4b63      	ldr	r3, [pc, #396]	; (194 <STIMULATOR_Handler+0x194>)
   8:	681b      	ldr	r3, [r3, #0]
   a:	4a63      	ldr	r2, [pc, #396]	; (198 <STIMULATOR_Handler+0x198>)
   c:	8852      	ldrh	r2, [r2, #2]
   e:	fbb3 f1f2 	udiv	r1, r3, r2
  12:	fb02 f201 	mul.w	r2, r2, r1
  16:	1a9a      	subs	r2, r3, r2
  18:	2a00      	cmp	r2, #0
  1a:	bf0c      	ite	eq
  1c:	2200      	moveq	r2, #0
  1e:	2201      	movne	r2, #1
  20:	b2d2      	uxtb	r2, r2
  22:	f103 0101 	add.w	r1, r3, #1
  26:	4b5b      	ldr	r3, [pc, #364]	; (194 <STIMULATOR_Handler+0x194>)
  28:	6019      	str	r1, [r3, #0]
  2a:	2a00      	cmp	r2, #0
  2c:	f040 80a4 	bne.w	178 <STIMULATOR_Handler+0x178>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:287
    
#else        

    // Real code using connected hardware
                    
    switch(PulseSeq.sequence_multiplicity)
  30:	4b59      	ldr	r3, [pc, #356]	; (198 <STIMULATOR_Handler+0x198>)
  32:	791b      	ldrb	r3, [r3, #4]
  34:	2b00      	cmp	r3, #0
  36:	d002      	beq.n	3e <STIMULATOR_Handler+0x3e>
  38:	2b01      	cmp	r3, #1
  3a:	d003      	beq.n	44 <STIMULATOR_Handler+0x44>
  3c:	e016      	b.n	6c <STIMULATOR_Handler+0x6c>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:290
    {        
        case SEQUENCEMULTIPLICITY_SINGLE:
            GeneratePulseSequenceAndReadCAE();        
  3e:	f7ff fffe 	bl	0 <STIMULATOR_Handler>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:291
            break;
  42:	e013      	b.n	2a <STIMULATOR_Handler+0x2a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:294
        
        case SEQUENCEMULTIPLICITY_DOUBLE:
            GeneratePulseSequenceAndReadCAE();        
  44:	f7ff fffe 	bl	0 <STIMULATOR_Handler>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:295
            {u32 i; WHILE_DELAY_LOOP(PulseSeq.delay_between_sequences_loop_counts)}
  48:	4b53      	ldr	r3, [pc, #332]	; (198 <STIMULATOR_Handler+0x198>)
  4a:	891b      	ldrh	r3, [r3, #8]
  4c:	607b      	str	r3, [r7, #4]
  4e:	687b      	ldr	r3, [r7, #4]
  50:	2b00      	cmp	r3, #0
  52:	bf0c      	ite	eq
  54:	2300      	moveq	r3, #0
  56:	2301      	movne	r3, #1
  58:	b2db      	uxtb	r3, r3
  5a:	687a      	ldr	r2, [r7, #4]
  5c:	f102 32ff 	add.w	r2, r2, #4294967295
  60:	607a      	str	r2, [r7, #4]
  62:	2b00      	cmp	r3, #0
  64:	d1f3      	bne.n	4e <STIMULATOR_Handler+0x4e>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:296
            GeneratePulseSequenceAndReadCAE();        
  66:	f7ff fffe 	bl	0 <STIMULATOR_Handler>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:297
            break;
  6a:	bf00      	nop
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:302
    }   
                    
#endif
        
    switch(StimState)
  6c:	4b4b      	ldr	r3, [pc, #300]	; (19c <STIMULATOR_Handler+0x19c>)
  6e:	781b      	ldrb	r3, [r3, #0]
  70:	2b03      	cmp	r3, #3
  72:	f200 808a 	bhi.w	18a <STIMULATOR_Handler+0x18a>
  76:	a201      	add	r2, pc, #4	; (adr r2, 7c <STIMULATOR_Handler+0x7c>)
  78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  7c:	0000008d 	.word	0x0000008d
  80:	000000cf 	.word	0x000000cf
  84:	00000145 	.word	0x00000145
  88:	00000111 	.word	0x00000111
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:306
    {
        case STIMSTATE_IDLE:  
        
                LED_Set( LED_RED, LED_ON);                
  8c:	4b44      	ldr	r3, [pc, #272]	; (1a0 <STIMULATOR_Handler+0x1a0>)
  8e:	681b      	ldr	r3, [r3, #0]
  90:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  94:	f04f 0001 	mov.w	r0, #1
  98:	f04f 0101 	mov.w	r1, #1
  9c:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:307
                LED_Set( LED_GREEN, LED_OFF);           
  9e:	4b40      	ldr	r3, [pc, #256]	; (1a0 <STIMULATOR_Handler+0x1a0>)
  a0:	681b      	ldr	r3, [r3, #0]
  a2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  a6:	f04f 0000 	mov.w	r0, #0
  aa:	f04f 0100 	mov.w	r1, #0
  ae:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:311
                            
        
                // check if still idle    
                if(Readout.CAE1 >= ReadoutLimit_CAE1_for_Run)
  b0:	4b3c      	ldr	r3, [pc, #240]	; (1a4 <STIMULATOR_Handler+0x1a4>)
  b2:	681a      	ldr	r2, [r3, #0]
  b4:	4b3c      	ldr	r3, [pc, #240]	; (1a8 <STIMULATOR_Handler+0x1a8>)
  b6:	881b      	ldrh	r3, [r3, #0]
  b8:	429a      	cmp	r2, r3
  ba:	d35f      	bcc.n	17c <STIMULATOR_Handler+0x17c>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:313
                    {
                    StimState = STIMSTATE_WAITING_FOR_RUN;
  bc:	4b37      	ldr	r3, [pc, #220]	; (19c <STIMULATOR_Handler+0x19c>)
  be:	f04f 0202 	mov.w	r2, #2
  c2:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:314
                    state_change_cnt = 0;
  c4:	4b39      	ldr	r3, [pc, #228]	; (1ac <STIMULATOR_Handler+0x1ac>)
  c6:	f04f 0200 	mov.w	r2, #0
  ca:	601a      	str	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:316
                    }
                break;
  cc:	e05d      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:320
        
        case STIMSTATE_RUN:  
            
                LED_Set( LED_RED, LED_OFF);                
  ce:	4b34      	ldr	r3, [pc, #208]	; (1a0 <STIMULATOR_Handler+0x1a0>)
  d0:	681b      	ldr	r3, [r3, #0]
  d2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  d6:	f04f 0001 	mov.w	r0, #1
  da:	f04f 0100 	mov.w	r1, #0
  de:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:321
                LED_Set( LED_GREEN, LED_ON);                
  e0:	4b2f      	ldr	r3, [pc, #188]	; (1a0 <STIMULATOR_Handler+0x1a0>)
  e2:	681b      	ldr	r3, [r3, #0]
  e4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  e8:	f04f 0000 	mov.w	r0, #0
  ec:	f04f 0101 	mov.w	r1, #1
  f0:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:325
                                                              
        
                // check if still running
                if(Readout.CAE1 <= ReadoutLimit_CAE1_for_Idle)
  f2:	4b2c      	ldr	r3, [pc, #176]	; (1a4 <STIMULATOR_Handler+0x1a4>)
  f4:	681a      	ldr	r2, [r3, #0]
  f6:	4b2e      	ldr	r3, [pc, #184]	; (1b0 <STIMULATOR_Handler+0x1b0>)
  f8:	881b      	ldrh	r3, [r3, #0]
  fa:	429a      	cmp	r2, r3
  fc:	d840      	bhi.n	180 <STIMULATOR_Handler+0x180>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:327
                    {
                    StimState = STIMSTATE_WAITING_FOR_IDLE;
  fe:	4b27      	ldr	r3, [pc, #156]	; (19c <STIMULATOR_Handler+0x19c>)
 100:	f04f 0203 	mov.w	r2, #3
 104:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:328
                    state_change_cnt = 0;
 106:	4b29      	ldr	r3, [pc, #164]	; (1ac <STIMULATOR_Handler+0x1ac>)
 108:	f04f 0200 	mov.w	r2, #0
 10c:	601a      	str	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:330
                    }                
                break;
 10e:	e03c      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:333
                
        case STIMSTATE_WAITING_FOR_IDLE:  
                if(Readout.CAE1 > ReadoutLimit_CAE1_for_Idle)
 110:	4b24      	ldr	r3, [pc, #144]	; (1a4 <STIMULATOR_Handler+0x1a4>)
 112:	681a      	ldr	r2, [r3, #0]
 114:	4b26      	ldr	r3, [pc, #152]	; (1b0 <STIMULATOR_Handler+0x1b0>)
 116:	881b      	ldrh	r3, [r3, #0]
 118:	429a      	cmp	r2, r3
 11a:	d904      	bls.n	126 <STIMULATOR_Handler+0x126>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:335
                    {
                    StimState = STIMSTATE_RUN;
 11c:	4b1f      	ldr	r3, [pc, #124]	; (19c <STIMULATOR_Handler+0x19c>)
 11e:	f04f 0201 	mov.w	r2, #1
 122:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:342
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
                        {
                        StimState = STIMSTATE_IDLE;
                        }                                          
                break;
 124:	e031      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:338
                if(Readout.CAE1 > ReadoutLimit_CAE1_for_Idle)
                    {
                    StimState = STIMSTATE_RUN;
                    }
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
 126:	4b21      	ldr	r3, [pc, #132]	; (1ac <STIMULATOR_Handler+0x1ac>)
 128:	681b      	ldr	r3, [r3, #0]
 12a:	f103 0201 	add.w	r2, r3, #1
 12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <STIMULATOR_Handler+0x1ac>)
 130:	601a      	str	r2, [r3, #0]
 132:	4b1e      	ldr	r3, [pc, #120]	; (1ac <STIMULATOR_Handler+0x1ac>)
 134:	681b      	ldr	r3, [r3, #0]
 136:	2b0a      	cmp	r3, #10
 138:	d124      	bne.n	184 <STIMULATOR_Handler+0x184>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:340
                        {
                        StimState = STIMSTATE_IDLE;
 13a:	4b18      	ldr	r3, [pc, #96]	; (19c <STIMULATOR_Handler+0x19c>)
 13c:	f04f 0200 	mov.w	r2, #0
 140:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:342
                        }                                          
                break;
 142:	e022      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:345
                    
        case STIMSTATE_WAITING_FOR_RUN:  
                if(Readout.CAE1 < ReadoutLimit_CAE1_for_Run)
 144:	4b17      	ldr	r3, [pc, #92]	; (1a4 <STIMULATOR_Handler+0x1a4>)
 146:	681a      	ldr	r2, [r3, #0]
 148:	4b17      	ldr	r3, [pc, #92]	; (1a8 <STIMULATOR_Handler+0x1a8>)
 14a:	881b      	ldrh	r3, [r3, #0]
 14c:	429a      	cmp	r2, r3
 14e:	d204      	bcs.n	15a <STIMULATOR_Handler+0x15a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:347
                    {
                    StimState = STIMSTATE_IDLE;
 150:	4b12      	ldr	r3, [pc, #72]	; (19c <STIMULATOR_Handler+0x19c>)
 152:	f04f 0200 	mov.w	r2, #0
 156:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:354
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
                        {
                        StimState = STIMSTATE_RUN;
                        }                                          
                break;
 158:	e017      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:350
                if(Readout.CAE1 < ReadoutLimit_CAE1_for_Run)
                    {
                    StimState = STIMSTATE_IDLE;
                    }
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
 15a:	4b14      	ldr	r3, [pc, #80]	; (1ac <STIMULATOR_Handler+0x1ac>)
 15c:	681b      	ldr	r3, [r3, #0]
 15e:	f103 0201 	add.w	r2, r3, #1
 162:	4b12      	ldr	r3, [pc, #72]	; (1ac <STIMULATOR_Handler+0x1ac>)
 164:	601a      	str	r2, [r3, #0]
 166:	4b11      	ldr	r3, [pc, #68]	; (1ac <STIMULATOR_Handler+0x1ac>)
 168:	681b      	ldr	r3, [r3, #0]
 16a:	2b0a      	cmp	r3, #10
 16c:	d10c      	bne.n	188 <STIMULATOR_Handler+0x188>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:352
                        {
                        StimState = STIMSTATE_RUN;
 16e:	4b0b      	ldr	r3, [pc, #44]	; (19c <STIMULATOR_Handler+0x19c>)
 170:	f04f 0201 	mov.w	r2, #1
 174:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:354
                        }                                          
                break;
 176:	e008      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:239
static u32 state_change_cnt = 0;
static u32 frequency_cnt = 0;

if((frequency_cnt++) % PulseSeq.frequency_divider)
            {
            return;
 178:	bf00      	nop
 17a:	e006      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:316
                if(Readout.CAE1 >= ReadoutLimit_CAE1_for_Run)
                    {
                    StimState = STIMSTATE_WAITING_FOR_RUN;
                    state_change_cnt = 0;
                    }
                break;
 17c:	bf00      	nop
 17e:	e004      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:330
                if(Readout.CAE1 <= ReadoutLimit_CAE1_for_Idle)
                    {
                    StimState = STIMSTATE_WAITING_FOR_IDLE;
                    state_change_cnt = 0;
                    }                
                break;
 180:	bf00      	nop
 182:	e002      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:342
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
                        {
                        StimState = STIMSTATE_IDLE;
                        }                                          
                break;
 184:	bf00      	nop
 186:	e000      	b.n	18a <STIMULATOR_Handler+0x18a>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:354
                else                    
                    if(++state_change_cnt == STATECHANGE_CNT_LIMIT)
                        {
                        StimState = STIMSTATE_RUN;
                        }                                          
                break;
 188:	bf00      	nop
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:357
    }

}
 18a:	f107 0708 	add.w	r7, r7, #8
 18e:	46bd      	mov	sp, r7
 190:	bd80      	pop	{r7, pc}
 192:	bf00      	nop
 194:	00000148 	.word	0x00000148
 198:	00000004 	.word	0x00000004
 19c:	0000002c 	.word	0x0000002c
 1a0:	00000000 	.word	0x00000000
 1a4:	00000028 	.word	0x00000028
 1a8:	0000002e 	.word	0x0000002e
 1ac:	0000014c 	.word	0x0000014c
 1b0:	00000030 	.word	0x00000030

Disassembly of section .text.Application_Ini:

00000000 <Application_Ini>:
Application_Ini():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:367
*                  be called only once by CircleOS.
* Input          : None
* Return         : MENU_CONTINUE_COMMAND
*******************************************************************************/
enum MENU_code Application_Ini(void)
    {        
   0:	b086b580 	.word	0xb086b580
   4:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:369

    LCD_SetOffset(OFFSET_OFF);
   6:	4b58      	ldr	r3, [pc, #352]	; (168 <Application_Ini+0x168>)
   8:	681b      	ldr	r3, [r3, #0]
   a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
   e:	f04f 0000 	mov.w	r0, #0
  12:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:371
    
    UTIL_SetDividerHandler(MENU_SCHHDL_ID, 10);             //  10 is default
  14:	4b54      	ldr	r3, [pc, #336]	; (168 <Application_Ini+0x168>)
  16:	681b      	ldr	r3, [r3, #0]
  18:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
  1c:	f04f 0004 	mov.w	r0, #4
  20:	f04f 010a 	mov.w	r1, #10
  24:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:372
    MENU_SetAppliDivider( 10 );                             // This application will be called every 10*10 =100 SysTicks
  26:	4b50      	ldr	r3, [pc, #320]	; (168 <Application_Ini+0x168>)
  28:	681b      	ldr	r3, [r3, #0]
  2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  2e:	f04f 000a 	mov.w	r0, #10
  32:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:373
    UTIL_SetSchHandler(STIMULATOR_HANDLER_ID, STIMULATOR_Handler );
  34:	4b4c      	ldr	r3, [pc, #304]	; (168 <Application_Ini+0x168>)
  36:	681b      	ldr	r3, [r3, #0]
  38:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
  3c:	4a4b      	ldr	r2, [pc, #300]	; (16c <Application_Ini+0x16c>)
  3e:	f04f 000d 	mov.w	r0, #13
  42:	4611      	mov	r1, r2
  44:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:374
    UTIL_SetDividerHandler(STIMULATOR_HANDLER_ID, 1);       // This handler will be called every single SysTick
  46:	4b48      	ldr	r3, [pc, #288]	; (168 <Application_Ini+0x168>)
  48:	681b      	ldr	r3, [r3, #0]
  4a:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
  4e:	f04f 000d 	mov.w	r0, #13
  52:	f04f 0101 	mov.w	r1, #1
  56:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:376
    
    UTIL_SetPll(SPEED_VERY_HIGH);                           // CPU frequency is 120MHz; Systick frequency is 3kHZ
  58:	4b43      	ldr	r3, [pc, #268]	; (168 <Application_Ini+0x168>)
  5a:	681b      	ldr	r3, [r3, #0]
  5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
  60:	f04f 0005 	mov.w	r0, #5
  64:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:379
                                                            // see EvoPrimer Manual for STM32F429ZI
    
    SetAutorun();
  66:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:386
    //-------------------------------------
    // Initialize ...
        
    
    // ... Frequency and Pulse Sequence
    SetFrequency_1();
  6a:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:387
    SetPulseSequence_1();
  6e:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:391
        
    
    // ... GUI    
    GUI(GUI_INITIALIZE,0);
  72:	f04f 0000 	mov.w	r0, #0
  76:	f04f 0100 	mov.w	r1, #0
  7a:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:394
    
    // ... request mechanism
    ActualPendingRequest = PENDING_REQUEST_NONE;
  7e:	4b3c      	ldr	r3, [pc, #240]	; (170 <Application_Ini+0x170>)
  80:	f04f 0200 	mov.w	r2, #0
  84:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:397
    
    // ... state machine
    StimState = STIMSTATE_IDLE; 
  86:	4b3b      	ldr	r3, [pc, #236]	; (174 <Application_Ini+0x174>)
  88:	f04f 0200 	mov.w	r2, #0
  8c:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:400
    
    // ... readout limits
    ReadoutLimit_CAE1_for_Run = 10;
  8e:	4b3a      	ldr	r3, [pc, #232]	; (178 <Application_Ini+0x178>)
  90:	f04f 020a 	mov.w	r2, #10
  94:	801a      	strh	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:401
    ReadoutLimit_CAE1_for_Idle = 10;
  96:	4b39      	ldr	r3, [pc, #228]	; (17c <Application_Ini+0x17c>)
  98:	f04f 020a 	mov.w	r2, #10
  9c:	801a      	strh	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:423
    
    // SPI Setup
    
    tCX_SPI_Config s_SpiInit;
    
    s_SpiInit.Speed = CX_SPI_Mode_VeryHigh;             // The speed range of the serial bit rate.
  9e:	f04f 0304 	mov.w	r3, #4
  a2:	703b      	strb	r3, [r7, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:424
    s_SpiInit.WordLength = CX_SPI_8_Bits;               // The number of transferred data bit. Standard is 8, but could be 16 for some specific devices.
  a4:	f04f 0300 	mov.w	r3, #0
  a8:	707b      	strb	r3, [r7, #1]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:425
    s_SpiInit.Mode = CX_SPI_MODE_MASTER;                // 1: master, 0: slave
  aa:	f04f 0301 	mov.w	r3, #1
  ae:	70bb      	strb	r3, [r7, #2]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:426
    s_SpiInit.Polarity = CX_SPI_POL_LOW;                // Indicates the steady state (idle state of the clock when no transmission).
  b0:	f04f 0300 	mov.w	r3, #0
  b4:	70fb      	strb	r3, [r7, #3]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:427
    s_SpiInit.Phase = CX_SPI_PHA_FIRST;                 // Phase:  0 indicates that the first edge of the clock when leaving the idle state is active
  b6:	f04f 0300 	mov.w	r3, #0
  ba:	713b      	strb	r3, [r7, #4]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:429
                                                        //         1 indicates that the second edge of the clock when leaving the idle state is active
    s_SpiInit.MSB1LSB0 = CX_SPI_MSBFIRST;               // First bit to be sent.  1: MSB first, 0: LSB first
  bc:	f04f 0300 	mov.w	r3, #0
  c0:	717b      	strb	r3, [r7, #5]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:430
    s_SpiInit.Nss = CX_SPI_Soft;                        // NSS signal management : 1 = by hardware (NSS pin), 0 = by software using the SSI bit
  c2:	f04f 0300 	mov.w	r3, #0
  c6:	71bb      	strb	r3, [r7, #6]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:433
                                                        // IH141230 this must be set to CX_SPI_Soft, but the actual didgital potentiometer
                                                        // update is triggered by rising edge of NSS bit (PIN8)
    s_SpiInit.RxBuffer = MyFifoRxBuffer;                // Rolling buffer to be used for reception
  c8:	4b2d      	ldr	r3, [pc, #180]	; (180 <Application_Ini+0x180>)
  ca:	60bb      	str	r3, [r7, #8]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:434
    s_SpiInit.RxBufferLen = sizeof( MyFifoRxBuffer );   // Size of the receive buffer
  cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  d0:	60fb      	str	r3, [r7, #12]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:435
    s_SpiInit.TxBuffer = MyFifoTxBuffer;                // Buffer to be used for transmission
  d2:	4b2c      	ldr	r3, [pc, #176]	; (184 <Application_Ini+0x184>)
  d4:	613b      	str	r3, [r7, #16]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:436
    s_SpiInit.TxBufferLen = sizeof( MyFifoRxBuffer );   // Size
  d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  da:	617b      	str	r3, [r7, #20]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:438

    CX_Configure( CX_SPI,  &s_SpiInit, 0 );
  dc:	4b22      	ldr	r3, [pc, #136]	; (168 <Application_Ini+0x168>)
  de:	681b      	ldr	r3, [r3, #0]
  e0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  e4:	463a      	mov	r2, r7
  e6:	f04f 0021 	mov.w	r0, #33	; 0x21
  ea:	4611      	mov	r1, r2
  ec:	f04f 0200 	mov.w	r2, #0
  f0:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:441
                            
    // NSS (aka CS(neg)) pin setup                        
    CX_Configure( CX_GPIO_PIN8, CX_GPIO_Mode_OUT_PP, 0 );  //Push-pull mode    
  f2:	4b1d      	ldr	r3, [pc, #116]	; (168 <Application_Ini+0x168>)
  f4:	681b      	ldr	r3, [r3, #0]
  f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  fa:	f04f 0008 	mov.w	r0, #8
  fe:	f04f 0104 	mov.w	r1, #4
 102:	f04f 0200 	mov.w	r2, #0
 106:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:442
    CX_Write( CX_GPIO_PIN8, CX_GPIO_HIGH, 0 );             // initial NSS state is HIGH
 108:	4b17      	ldr	r3, [pc, #92]	; (168 <Application_Ini+0x168>)
 10a:	681b      	ldr	r3, [r3, #0]
 10c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 110:	f04f 0008 	mov.w	r0, #8
 114:	f04f 0101 	mov.w	r1, #1
 118:	f04f 0200 	mov.w	r2, #0
 11c:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:446
    
    // ADC Setup
   
    CX_Configure( CX_ADC1,  0 , 0 );
 11e:	4b12      	ldr	r3, [pc, #72]	; (168 <Application_Ini+0x168>)
 120:	681b      	ldr	r3, [r3, #0]
 122:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 126:	f04f 0023 	mov.w	r0, #35	; 0x23
 12a:	f04f 0100 	mov.w	r1, #0
 12e:	f04f 0200 	mov.w	r2, #0
 132:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:454
 
    //-------------------------------------
    
    //--- at start, show intro screen for 2 seconds
        
    ActualPendingRequest = PENDING_REQUEST_SHOWING_INTRO_SCREEN;
 134:	4b0e      	ldr	r3, [pc, #56]	; (170 <Application_Ini+0x170>)
 136:	f04f 0202 	mov.w	r2, #2
 13a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:455
    GUI(GUI_INTRO_SCREEN,0);                                                     
 13c:	f04f 0003 	mov.w	r0, #3
 140:	f04f 0100 	mov.w	r1, #0
 144:	f7ff fffe 	bl	0 <Application_Ini>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:456
    UTIL_SetTimer(2000,TimerHandler1);
 148:	4b07      	ldr	r3, [pc, #28]	; (168 <Application_Ini+0x168>)
 14a:	681b      	ldr	r3, [r3, #0]
 14c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 150:	4a0d      	ldr	r2, [pc, #52]	; (188 <Application_Ini+0x188>)
 152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 156:	4611      	mov	r1, r2
 158:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:458
        
    return MENU_CONTINUE_COMMAND;
 15a:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:459
    }
 15e:	4618      	mov	r0, r3
 160:	f107 0718 	add.w	r7, r7, #24
 164:	46bd      	mov	sp, r7
 166:	bd80      	pop	{r7, pc}
	...
 174:	0000002c 	.word	0x0000002c
 178:	0000002e 	.word	0x0000002e
 17c:	00000030 	.word	0x00000030
 180:	00000034 	.word	0x00000034
 184:	000000b4 	.word	0x000000b4
 188:	00000000 	.word	0x00000000

Disassembly of section .text.Application_Handler:

00000000 <Application_Handler>:
Application_Handler():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:470
*                  every multiple of SysTisk by CircleOS while it returns MENU_CONTINUE.
* Input          : None
* Return         : MENU_CONTINUE
*******************************************************************************/
enum MENU_code Application_Handler(void)
    {
   0:	af00b580 	.word	0xaf00b580
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:478
    
    static int GUIUpdate_cnt = 0;    
        
  
    // process special requests first    
    switch(ActualPendingRequest)
   4:	4b22      	ldr	r3, [pc, #136]	; (90 <Application_Handler+0x90>)
   6:	781b      	ldrb	r3, [r3, #0]
   8:	2b01      	cmp	r3, #1
   a:	d003      	beq.n	14 <Application_Handler+0x14>
   c:	2b02      	cmp	r3, #2
   e:	d013      	beq.n	38 <Application_Handler+0x38>
  10:	2b00      	cmp	r3, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:481
    {
        case PENDING_REQUEST_NONE:  // this is default; continue
            break;
  12:	e014      	b.n	3e <Application_Handler+0x3e>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:485
                              
        case PENDING_REQUEST_REDRAW:  
            
            BUTTON_SetMode( BUTTON_ONOFF ) ;            
  14:	4b1f      	ldr	r3, [pc, #124]	; (94 <Application_Handler+0x94>)
  16:	681b      	ldr	r3, [r3, #0]
  18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
  1c:	f04f 0000 	mov.w	r0, #0
  20:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:486
            ActualPendingRequest = PENDING_REQUEST_NONE;           
  22:	4b1b      	ldr	r3, [pc, #108]	; (90 <Application_Handler+0x90>)
  24:	f04f 0200 	mov.w	r2, #0
  28:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:487
            GUI(GUI_CLEAR,0);                                                     
  2a:	f04f 0002 	mov.w	r0, #2
  2e:	f04f 0100 	mov.w	r1, #0
  32:	f7ff fffe 	bl	0 <Application_Handler>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:488
            break;       
  36:	e002      	b.n	3e <Application_Handler+0x3e>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:491
        
        case PENDING_REQUEST_SHOWING_INTRO_SCREEN:            
            return MENU_CONTINUE;
  38:	f04f 0301 	mov.w	r3, #1
  3c:	e026      	b.n	8c <Application_Handler+0x8c>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:497
    }
  
    // normal processing    
    if (!(GUIUpdate_cnt % GUIUPDATE_DIVIDER))
        {
        GUI(GUI_NORMAL_UPDATE,0);        
  3e:	f04f 0001 	mov.w	r0, #1
  42:	f04f 0100 	mov.w	r1, #0
  46:	f7ff fffe 	bl	0 <Application_Handler>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:499
        }   
    GUIUpdate_cnt++;
  4a:	4b13      	ldr	r3, [pc, #76]	; (98 <Application_Handler+0x98>)
  4c:	681b      	ldr	r3, [r3, #0]
  4e:	f103 0201 	add.w	r2, r3, #1
  52:	4b11      	ldr	r3, [pc, #68]	; (98 <Application_Handler+0x98>)
  54:	601a      	str	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:502
  
    // check button state to invoke main menu
    if ( BUTTON_GetState() == BUTTON_PUSHED )
  56:	4b0f      	ldr	r3, [pc, #60]	; (94 <Application_Handler+0x94>)
  58:	681b      	ldr	r3, [r3, #0]
  5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
  5e:	4798      	blx	r3
  60:	4603      	mov	r3, r0
  62:	b2db      	uxtb	r3, r3
  64:	b25b      	sxtb	r3, r3
  66:	2b01      	cmp	r3, #1
  68:	d10e      	bne.n	88 <Application_Handler+0x88>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:504
    {
        BUTTON_WaitForRelease();
  6a:	4b0a      	ldr	r3, [pc, #40]	; (94 <Application_Handler+0x94>)
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  72:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:505
        MENU_Set( ( tMenu* ) &MenuMainSTiM32 );
  74:	4b07      	ldr	r3, [pc, #28]	; (94 <Application_Handler+0x94>)
  76:	681b      	ldr	r3, [r3, #0]
  78:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
  7c:	4a07      	ldr	r2, [pc, #28]	; (9c <Application_Handler+0x9c>)
  7e:	4610      	mov	r0, r2
  80:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:506
        return MENU_CHANGE;
  82:	f04f 0303 	mov.w	r3, #3
  86:	e001      	b.n	8c <Application_Handler+0x8c>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:509
    }

    return MENU_CONTINUE;  
  88:	f04f 0301 	mov.w	r3, #1
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:510
    }
  8c:	4618      	mov	r0, r3
  8e:	bd80      	pop	{r7, pc}
	...
  98:	00000144 	.word	0x00000144
  9c:	00000000 	.word	0x00000000

Disassembly of section .text.TimerHandler1:

00000000 <TimerHandler1>:
TimerHandler1():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:516

/*******************************************************************************
* Function Group: Timer Handlers
*******************************************************************************/
void TimerHandler1(void)
    {    
   0:	af00b580 	.word	0xaf00b580
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:517
    ActualPendingRequest = PENDING_REQUEST_NONE;
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <TimerHandler1+0x1c>)
   6:	f04f 0200 	mov.w	r2, #0
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:518
    GUI(GUI_INITIALIZE,0);
   c:	f04f 0000 	mov.w	r0, #0
  10:	f04f 0100 	mov.w	r1, #0
  14:	f7ff fffe 	bl	0 <TimerHandler1>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:519
    }
  18:	bd80      	pop	{r7, pc}
  1a:	bf00      	nop
  1c:	00000000 	.word	0x00000000

Disassembly of section .text.MenuSetup_Freq:

00000000 <MenuSetup_Freq>:
MenuSetup_Freq():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:525

/*******************************************************************************
* Function Group: Setup Menu Handlers
*******************************************************************************/
enum MENU_code  MenuSetup_Freq(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:526
    MENU_Set( ( tMenu* ) &MenuSetFrequency );                 
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <MenuSetup_Freq+0x1c>)
   6:	681b      	ldr	r3, [r3, #0]
   8:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
   c:	4a04      	ldr	r2, [pc, #16]	; (20 <MenuSetup_Freq+0x20>)
   e:	4610      	mov	r0, r2
  10:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:527
    return MENU_CHANGE;
  12:	f04f 0303 	mov.w	r3, #3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:528
    }
  16:	4618      	mov	r0, r3
  18:	bd80      	pop	{r7, pc}
  1a:	bf00      	nop
	...

Disassembly of section .text.MenuSetup_PSeq:

00000000 <MenuSetup_PSeq>:
MenuSetup_PSeq():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:531

enum MENU_code  MenuSetup_PSeq(void)
    {    
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:532
    MENU_Set( ( tMenu* ) &MenuSetPulseSequence );             
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <MenuSetup_PSeq+0x1c>)
   6:	681b      	ldr	r3, [r3, #0]
   8:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
   c:	4a04      	ldr	r2, [pc, #16]	; (20 <MenuSetup_PSeq+0x20>)
   e:	4610      	mov	r0, r2
  10:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:533
    return MENU_CHANGE;
  12:	f04f 0303 	mov.w	r3, #3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:534
    }
  16:	4618      	mov	r0, r3
  18:	bd80      	pop	{r7, pc}
  1a:	bf00      	nop
	...

Disassembly of section .text.SetFrequency_1:

00000000 <SetFrequency_1>:
SetFrequency_1():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:537

enum MENU_code  SetFrequency_1(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:538
    PulseSeq.frequency = FREQUENCY_1KHZ;     
   4:	4b06      	ldr	r3, [pc, #24]	; (20 <SetFrequency_1+0x20>)
   6:	f04f 0201 	mov.w	r2, #1
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:539
    UpdatePulseSequence();
   c:	f7ff fffe 	bl	0 <SetFrequency_1>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:541
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  10:	4b04      	ldr	r3, [pc, #16]	; (24 <SetFrequency_1+0x24>)
  12:	f04f 0201 	mov.w	r2, #1
  16:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:542
    return MENU_CONTINUE_COMMAND;
  18:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:543
    }
  1c:	4618      	mov	r0, r3
  1e:	bd80      	pop	{r7, pc}
  20:	00000004 	.word	0x00000004
  24:	00000000 	.word	0x00000000

Disassembly of section .text.SetFrequency_2:

00000000 <SetFrequency_2>:
SetFrequency_2():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:546

enum MENU_code  SetFrequency_2(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:547
    PulseSeq.frequency = FREQUENCY_2KHZ;        
   4:	4b06      	ldr	r3, [pc, #24]	; (20 <SetFrequency_2+0x20>)
   6:	f04f 0202 	mov.w	r2, #2
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:548
    UpdatePulseSequence();
   c:	f7ff fffe 	bl	0 <SetFrequency_2>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:550
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  10:	4b04      	ldr	r3, [pc, #16]	; (24 <SetFrequency_2+0x24>)
  12:	f04f 0201 	mov.w	r2, #1
  16:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:551
    return MENU_CONTINUE_COMMAND;
  18:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:552
    }
  1c:	4618      	mov	r0, r3
  1e:	bd80      	pop	{r7, pc}
  20:	00000004 	.word	0x00000004
  24:	00000000 	.word	0x00000000

Disassembly of section .text.SetFrequency_3:

00000000 <SetFrequency_3>:
SetFrequency_3():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:555

enum MENU_code  SetFrequency_3(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:556
    PulseSeq.frequency = FREQUENCY_3KHZ;    
   4:	4b06      	ldr	r3, [pc, #24]	; (20 <SetFrequency_3+0x20>)
   6:	f04f 0203 	mov.w	r2, #3
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:557
    UpdatePulseSequence();
   c:	f7ff fffe 	bl	0 <SetFrequency_3>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:559
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  10:	4b04      	ldr	r3, [pc, #16]	; (24 <SetFrequency_3+0x24>)
  12:	f04f 0201 	mov.w	r2, #1
  16:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:560
    return MENU_CONTINUE_COMMAND;
  18:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:561
    }
  1c:	4618      	mov	r0, r3
  1e:	bd80      	pop	{r7, pc}
  20:	00000004 	.word	0x00000004
  24:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_1:

00000000 <SetPulseSequence_1>:
SetPulseSequence_1():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:564

enum MENU_code  SetPulseSequence_1(void)
    {       
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:565
    PulseSeq.delay1_microseconds = 200;        
   4:	4b0c      	ldr	r3, [pc, #48]	; (38 <SetPulseSequence_1+0x38>)
   6:	f04f 02c8 	mov.w	r2, #200	; 0xc8
   a:	821a      	strh	r2, [r3, #16]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:566
    PulseSeq.delay2_microseconds = 50;        
   c:	4b0a      	ldr	r3, [pc, #40]	; (38 <SetPulseSequence_1+0x38>)
   e:	f04f 0232 	mov.w	r2, #50	; 0x32
  12:	82da      	strh	r2, [r3, #22]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:567
    PulseSeq.delay3_microseconds = 0;             
  14:	4b08      	ldr	r3, [pc, #32]	; (38 <SetPulseSequence_1+0x38>)
  16:	f04f 0200 	mov.w	r2, #0
  1a:	839a      	strh	r2, [r3, #28]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:568
    PulseSeq.delay_between_sequences_microseconds = 200;    
  1c:	4b06      	ldr	r3, [pc, #24]	; (38 <SetPulseSequence_1+0x38>)
  1e:	f04f 02c8 	mov.w	r2, #200	; 0xc8
  22:	80da      	strh	r2, [r3, #6]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:569
    UpdatePulseSequence();
  24:	f7ff fffe 	bl	0 <SetPulseSequence_1>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:571
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  28:	4b04      	ldr	r3, [pc, #16]	; (3c <SetPulseSequence_1+0x3c>)
  2a:	f04f 0201 	mov.w	r2, #1
  2e:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:572
    return MENU_CONTINUE_COMMAND;
  30:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:573
    }
  34:	4618      	mov	r0, r3
  36:	bd80      	pop	{r7, pc}
  38:	00000004 	.word	0x00000004
  3c:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_2:

00000000 <SetPulseSequence_2>:
SetPulseSequence_2():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:576

enum MENU_code  SetPulseSequence_2(void)
    {    
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:577
    PulseSeq.delay1_microseconds = 0;        
   4:	4b0c      	ldr	r3, [pc, #48]	; (38 <SetPulseSequence_2+0x38>)
   6:	f04f 0200 	mov.w	r2, #0
   a:	821a      	strh	r2, [r3, #16]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:578
    PulseSeq.delay2_microseconds = 50;        
   c:	4b0a      	ldr	r3, [pc, #40]	; (38 <SetPulseSequence_2+0x38>)
   e:	f04f 0232 	mov.w	r2, #50	; 0x32
  12:	82da      	strh	r2, [r3, #22]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:579
    PulseSeq.delay3_microseconds = 50;          
  14:	4b08      	ldr	r3, [pc, #32]	; (38 <SetPulseSequence_2+0x38>)
  16:	f04f 0232 	mov.w	r2, #50	; 0x32
  1a:	839a      	strh	r2, [r3, #28]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:580
    PulseSeq.delay_between_sequences_microseconds = 400;        
  1c:	4b06      	ldr	r3, [pc, #24]	; (38 <SetPulseSequence_2+0x38>)
  1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
  22:	80da      	strh	r2, [r3, #6]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:581
    UpdatePulseSequence();
  24:	f7ff fffe 	bl	0 <SetPulseSequence_2>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:583
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  28:	4b04      	ldr	r3, [pc, #16]	; (3c <SetPulseSequence_2+0x3c>)
  2a:	f04f 0201 	mov.w	r2, #1
  2e:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:584
    return MENU_CONTINUE_COMMAND;
  30:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:585
    }
  34:	4618      	mov	r0, r3
  36:	bd80      	pop	{r7, pc}
  38:	00000004 	.word	0x00000004
  3c:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_3:

00000000 <SetPulseSequence_3>:
SetPulseSequence_3():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:588

enum MENU_code  SetPulseSequence_3(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:589
    PulseSeq.delay1_microseconds = 50;        
   4:	4b0c      	ldr	r3, [pc, #48]	; (38 <SetPulseSequence_3+0x38>)
   6:	f04f 0232 	mov.w	r2, #50	; 0x32
   a:	821a      	strh	r2, [r3, #16]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:590
    PulseSeq.delay2_microseconds = 50;        
   c:	4b0a      	ldr	r3, [pc, #40]	; (38 <SetPulseSequence_3+0x38>)
   e:	f04f 0232 	mov.w	r2, #50	; 0x32
  12:	82da      	strh	r2, [r3, #22]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:591
    PulseSeq.delay3_microseconds = 50;      
  14:	4b08      	ldr	r3, [pc, #32]	; (38 <SetPulseSequence_3+0x38>)
  16:	f04f 0232 	mov.w	r2, #50	; 0x32
  1a:	839a      	strh	r2, [r3, #28]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:592
    PulseSeq.delay_between_sequences_microseconds = 400;        
  1c:	4b06      	ldr	r3, [pc, #24]	; (38 <SetPulseSequence_3+0x38>)
  1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
  22:	80da      	strh	r2, [r3, #6]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:593
    UpdatePulseSequence();    
  24:	f7ff fffe 	bl	0 <SetPulseSequence_3>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:595
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  28:	4b04      	ldr	r3, [pc, #16]	; (3c <SetPulseSequence_3+0x3c>)
  2a:	f04f 0201 	mov.w	r2, #1
  2e:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:596
    return MENU_CONTINUE_COMMAND;
  30:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:597
    }
  34:	4618      	mov	r0, r3
  36:	bd80      	pop	{r7, pc}
  38:	00000004 	.word	0x00000004
  3c:	00000000 	.word	0x00000000

Disassembly of section .text.SetPulseSequence_4:

00000000 <SetPulseSequence_4>:
SetPulseSequence_4():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:600

enum MENU_code  SetPulseSequence_4(void)
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:601
    PulseSeq.delay1_microseconds = 400;        
   4:	4b0c      	ldr	r3, [pc, #48]	; (38 <SetPulseSequence_4+0x38>)
   6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   a:	821a      	strh	r2, [r3, #16]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:602
    PulseSeq.delay2_microseconds = 0;        
   c:	4b0a      	ldr	r3, [pc, #40]	; (38 <SetPulseSequence_4+0x38>)
   e:	f04f 0200 	mov.w	r2, #0
  12:	82da      	strh	r2, [r3, #22]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:603
    PulseSeq.delay3_microseconds = 0;
  14:	4b08      	ldr	r3, [pc, #32]	; (38 <SetPulseSequence_4+0x38>)
  16:	f04f 0200 	mov.w	r2, #0
  1a:	839a      	strh	r2, [r3, #28]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:604
    PulseSeq.delay_between_sequences_microseconds = 100;        
  1c:	4b06      	ldr	r3, [pc, #24]	; (38 <SetPulseSequence_4+0x38>)
  1e:	f04f 0264 	mov.w	r2, #100	; 0x64
  22:	80da      	strh	r2, [r3, #6]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:605
    UpdatePulseSequence();    
  24:	f7ff fffe 	bl	0 <SetPulseSequence_4>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:607
    
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
  28:	4b04      	ldr	r3, [pc, #16]	; (3c <SetPulseSequence_4+0x3c>)
  2a:	f04f 0201 	mov.w	r2, #1
  2e:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:608
    return MENU_CONTINUE_COMMAND;
  30:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:609
    }
  34:	4618      	mov	r0, r3
  36:	bd80      	pop	{r7, pc}
  38:	00000004 	.word	0x00000004
  3c:	00000000 	.word	0x00000000

Disassembly of section .text.Quit:

00000000 <Quit>:
Quit():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:612

enum MENU_code Quit( void )
{
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:613
        ActualPendingRequest = PENDING_REQUEST_REDRAW;   
   4:	4b30      	ldr	r3, [pc, #192]	; (c8 <Quit+0xc8>)
   6:	f04f 0201 	mov.w	r2, #1
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:615

        BUTTON_WaitForRelease();                                     
   c:	4b2f      	ldr	r3, [pc, #188]	; (cc <Quit+0xcc>)
   e:	681b      	ldr	r3, [r3, #0]
  10:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  14:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:616
        BUTTON_SetMode( BUTTON_ONOFF_FORMAIN );
  16:	4b2d      	ldr	r3, [pc, #180]	; (cc <Quit+0xcc>)
  18:	681b      	ldr	r3, [r3, #0]
  1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
  1e:	f04f 0001 	mov.w	r0, #1
  22:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:618
        
        LCD_SetBackLightOn();
  24:	4b29      	ldr	r3, [pc, #164]	; (cc <Quit+0xcc>)
  26:	681b      	ldr	r3, [r3, #0]
  28:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  2c:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:619
        LCD_SetRotateScreen( 1 );
  2e:	4b27      	ldr	r3, [pc, #156]	; (cc <Quit+0xcc>)
  30:	681b      	ldr	r3, [r3, #0]
  32:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
  36:	f04f 0001 	mov.w	r0, #1
  3a:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:620
        MENU_ClearCurrentCommand();
  3c:	4b23      	ldr	r3, [pc, #140]	; (cc <Quit+0xcc>)
  3e:	681b      	ldr	r3, [r3, #0]
  40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  44:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:621
        DRAW_SetDefaultColor();
  46:	4b21      	ldr	r3, [pc, #132]	; (cc <Quit+0xcc>)
  48:	681b      	ldr	r3, [r3, #0]
  4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4e:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:622
        DRAW_SetCharMagniCoeff( 1 );                                                      
  50:	4b1e      	ldr	r3, [pc, #120]	; (cc <Quit+0xcc>)
  52:	681b      	ldr	r3, [r3, #0]
  54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  58:	f04f 0001 	mov.w	r0, #1
  5c:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:623
        DRAW_Clear();
  5e:	4b1b      	ldr	r3, [pc, #108]	; (cc <Quit+0xcc>)
  60:	681b      	ldr	r3, [r3, #0]
  62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  66:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:624
        POINTER_SetMode( POINTER_ON );      
  68:	4b18      	ldr	r3, [pc, #96]	; (cc <Quit+0xcc>)
  6a:	681b      	ldr	r3, [r3, #0]
  6c:	699b      	ldr	r3, [r3, #24]
  6e:	f04f 0001 	mov.w	r0, #1
  72:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:626
        
        UTIL_SetPll(SPEED_MEDIUM);
  74:	4b15      	ldr	r3, [pc, #84]	; (cc <Quit+0xcc>)
  76:	681b      	ldr	r3, [r3, #0]
  78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
  7c:	f04f 0003 	mov.w	r0, #3
  80:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:628
                
        UTIL_SetSchHandler(STIMULATOR_HANDLER_ID, 0 );
  82:	4b12      	ldr	r3, [pc, #72]	; (cc <Quit+0xcc>)
  84:	681b      	ldr	r3, [r3, #0]
  86:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
  8a:	f04f 000d 	mov.w	r0, #13
  8e:	f04f 0100 	mov.w	r1, #0
  92:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:629
        LED_Set( LED_GREEN, LED_OFF );
  94:	4b0d      	ldr	r3, [pc, #52]	; (cc <Quit+0xcc>)
  96:	681b      	ldr	r3, [r3, #0]
  98:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  9c:	f04f 0000 	mov.w	r0, #0
  a0:	f04f 0100 	mov.w	r1, #0
  a4:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:630
        LED_Set( LED_RED, LED_OFF );
  a6:	4b09      	ldr	r3, [pc, #36]	; (cc <Quit+0xcc>)
  a8:	681b      	ldr	r3, [r3, #0]
  aa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
  ae:	f04f 0001 	mov.w	r0, #1
  b2:	f04f 0100 	mov.w	r1, #0
  b6:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:632
        
        return MENU_Quit();
  b8:	4b04      	ldr	r3, [pc, #16]	; (cc <Quit+0xcc>)
  ba:	681b      	ldr	r3, [r3, #0]
  bc:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
  c0:	4798      	blx	r3
  c2:	4603      	mov	r3, r0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:633
}
  c4:	4618      	mov	r0, r3
  c6:	bd80      	pop	{r7, pc}
	...

Disassembly of section .text.RestoreApp:

00000000 <RestoreApp>:
RestoreApp():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:636

enum MENU_code RestoreApp( void )
{    
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:637
    ActualPendingRequest = PENDING_REQUEST_REDRAW;    
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <RestoreApp+0x18>)
   6:	f04f 0201 	mov.w	r2, #1
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:638
    return MENU_RESTORE_COMMAND;    
   c:	f04f 0306 	mov.w	r3, #6
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:639
}
  10:	4618      	mov	r0, r3
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr
  18:	00000000 	.word	0x00000000

Disassembly of section .text.Cancel:

00000000 <Cancel>:
Cancel():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:642

enum MENU_code Cancel( void )
{
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:643
    ActualPendingRequest = PENDING_REQUEST_REDRAW;        
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <Cancel+0x18>)
   6:	f04f 0201 	mov.w	r2, #1
   a:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:644
    return MENU_CONTINUE_COMMAND;
   c:	f04f 0304 	mov.w	r3, #4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:645
}
  10:	4618      	mov	r0, r3
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr
  18:	00000000 	.word	0x00000000

Disassembly of section .text.LongDelay:

00000000 <LongDelay>:
LongDelay():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:656
*                  exit to main menu after 4 seconds
* Input          : u8 delayInSeconds
* Return         : None
*******************************************************************************/
static void LongDelay(u8 delayInSeconds)
    {
   0:	b580      	push	{r7, lr}
   2:	b084      	sub	sp, #16
   4:	af00      	add	r7, sp, #0
   6:	4603      	mov	r3, r0
   8:	71fb      	strb	r3, [r7, #7]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:659
    u8 hh, mm, ss, ss2;
    
    RTC_GetTime( &hh, &mm, &ss );
   a:	4b19      	ldr	r3, [pc, #100]	; (70 <LongDelay+0x70>)
   c:	681b      	ldr	r3, [r3, #0]
   e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
  12:	f107 000f 	add.w	r0, r7, #15
  16:	f107 010e 	add.w	r1, r7, #14
  1a:	f107 020d 	add.w	r2, r7, #13
  1e:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:660
    ss = ss + delayInSeconds;
  20:	7b7a      	ldrb	r2, [r7, #13]
  22:	79fb      	ldrb	r3, [r7, #7]
  24:	18d3      	adds	r3, r2, r3
  26:	b2db      	uxtb	r3, r3
  28:	737b      	strb	r3, [r7, #13]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:661
    ss = ss % 60;
  2a:	7b7a      	ldrb	r2, [r7, #13]
  2c:	4b11      	ldr	r3, [pc, #68]	; (74 <LongDelay+0x74>)
  2e:	fba3 1302 	umull	r1, r3, r3, r2
  32:	ea4f 1153 	mov.w	r1, r3, lsr #5
  36:	460b      	mov	r3, r1
  38:	ea4f 1303 	mov.w	r3, r3, lsl #4
  3c:	1a5b      	subs	r3, r3, r1
  3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
  42:	1ad3      	subs	r3, r2, r3
  44:	b2db      	uxtb	r3, r3
  46:	737b      	strb	r3, [r7, #13]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:665

    do
        {
        RTC_GetTime( &hh, &mm, &ss2 );
  48:	4b09      	ldr	r3, [pc, #36]	; (70 <LongDelay+0x70>)
  4a:	681b      	ldr	r3, [r3, #0]
  4c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
  50:	f107 000f 	add.w	r0, r7, #15
  54:	f107 010e 	add.w	r1, r7, #14
  58:	f107 020c 	add.w	r2, r7, #12
  5c:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:667
        }
    while ( ss2 != ss );           // do while < delayInSeconds seconds
  5e:	7b3a      	ldrb	r2, [r7, #12]
  60:	7b7b      	ldrb	r3, [r7, #13]
  62:	429a      	cmp	r2, r3
  64:	d1f0      	bne.n	48 <LongDelay+0x48>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:668
    }
  66:	f107 0710 	add.w	r7, r7, #16
  6a:	46bd      	mov	sp, r7
  6c:	bd80      	pop	{r7, pc}
  6e:	bf00      	nop
  70:	00000000 	.word	0x00000000
  74:	88888889 	.word	0x88888889

Disassembly of section .text.UpdatePulseSequence:

00000000 <UpdatePulseSequence>:
UpdatePulseSequence():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:684
* Return         : u32 loopCounts
*******************************************************************************/
#define MICROSECONDS_TO_LOOP_COUNTS(us)   ((float)(us)*15.0)  //IH150107 corrected (was 7.78 before)

static void UpdatePulseSequence()
    {
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:685
        PulseSeq.delay0_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay0_microseconds);
   4:	4b5f      	ldr	r3, [pc, #380]	; (184 <UpdatePulseSequence+0x184>)
   6:	895b      	ldrh	r3, [r3, #10]
   8:	4618      	mov	r0, r3
   a:	f7ff fffe 	bl	0 <__aeabi_ui2f>
   e:	4603      	mov	r3, r0
  10:	4618      	mov	r0, r3
  12:	f7ff fffe 	bl	0 <__aeabi_f2d>
  16:	4602      	mov	r2, r0
  18:	460b      	mov	r3, r1
  1a:	4610      	mov	r0, r2
  1c:	4619      	mov	r1, r3
  1e:	f04f 0200 	mov.w	r2, #0
  22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  26:	f503 1338 	add.w	r3, r3, #3014656	; 0x2e0000
  2a:	f7ff fffe 	bl	0 <__aeabi_dmul>
  2e:	4602      	mov	r2, r0
  30:	460b      	mov	r3, r1
  32:	4610      	mov	r0, r2
  34:	4619      	mov	r1, r3
  36:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  3a:	4603      	mov	r3, r0
  3c:	b29a      	uxth	r2, r3
  3e:	4b51      	ldr	r3, [pc, #324]	; (184 <UpdatePulseSequence+0x184>)
  40:	819a      	strh	r2, [r3, #12]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:686
        PulseSeq.delay1_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay1_microseconds);
  42:	4b50      	ldr	r3, [pc, #320]	; (184 <UpdatePulseSequence+0x184>)
  44:	8a1b      	ldrh	r3, [r3, #16]
  46:	4618      	mov	r0, r3
  48:	f7ff fffe 	bl	0 <__aeabi_ui2f>
  4c:	4603      	mov	r3, r0
  4e:	4618      	mov	r0, r3
  50:	f7ff fffe 	bl	0 <__aeabi_f2d>
  54:	4602      	mov	r2, r0
  56:	460b      	mov	r3, r1
  58:	4610      	mov	r0, r2
  5a:	4619      	mov	r1, r3
  5c:	f04f 0200 	mov.w	r2, #0
  60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  64:	f503 1338 	add.w	r3, r3, #3014656	; 0x2e0000
  68:	f7ff fffe 	bl	0 <__aeabi_dmul>
  6c:	4602      	mov	r2, r0
  6e:	460b      	mov	r3, r1
  70:	4610      	mov	r0, r2
  72:	4619      	mov	r1, r3
  74:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  78:	4603      	mov	r3, r0
  7a:	b29a      	uxth	r2, r3
  7c:	4b41      	ldr	r3, [pc, #260]	; (184 <UpdatePulseSequence+0x184>)
  7e:	825a      	strh	r2, [r3, #18]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:687
        PulseSeq.delay2_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay2_microseconds);
  80:	4b40      	ldr	r3, [pc, #256]	; (184 <UpdatePulseSequence+0x184>)
  82:	8adb      	ldrh	r3, [r3, #22]
  84:	4618      	mov	r0, r3
  86:	f7ff fffe 	bl	0 <__aeabi_ui2f>
  8a:	4603      	mov	r3, r0
  8c:	4618      	mov	r0, r3
  8e:	f7ff fffe 	bl	0 <__aeabi_f2d>
  92:	4602      	mov	r2, r0
  94:	460b      	mov	r3, r1
  96:	4610      	mov	r0, r2
  98:	4619      	mov	r1, r3
  9a:	f04f 0200 	mov.w	r2, #0
  9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  a2:	f503 1338 	add.w	r3, r3, #3014656	; 0x2e0000
  a6:	f7ff fffe 	bl	0 <__aeabi_dmul>
  aa:	4602      	mov	r2, r0
  ac:	460b      	mov	r3, r1
  ae:	4610      	mov	r0, r2
  b0:	4619      	mov	r1, r3
  b2:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  b6:	4603      	mov	r3, r0
  b8:	b29a      	uxth	r2, r3
  ba:	4b32      	ldr	r3, [pc, #200]	; (184 <UpdatePulseSequence+0x184>)
  bc:	831a      	strh	r2, [r3, #24]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:688
        PulseSeq.delay3_loop_counts = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay3_microseconds);     
  be:	4b31      	ldr	r3, [pc, #196]	; (184 <UpdatePulseSequence+0x184>)
  c0:	8b9b      	ldrh	r3, [r3, #28]
  c2:	4618      	mov	r0, r3
  c4:	f7ff fffe 	bl	0 <__aeabi_ui2f>
  c8:	4603      	mov	r3, r0
  ca:	4618      	mov	r0, r3
  cc:	f7ff fffe 	bl	0 <__aeabi_f2d>
  d0:	4602      	mov	r2, r0
  d2:	460b      	mov	r3, r1
  d4:	4610      	mov	r0, r2
  d6:	4619      	mov	r1, r3
  d8:	f04f 0200 	mov.w	r2, #0
  dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  e0:	f503 1338 	add.w	r3, r3, #3014656	; 0x2e0000
  e4:	f7ff fffe 	bl	0 <__aeabi_dmul>
  e8:	4602      	mov	r2, r0
  ea:	460b      	mov	r3, r1
  ec:	4610      	mov	r0, r2
  ee:	4619      	mov	r1, r3
  f0:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
  f4:	4603      	mov	r3, r0
  f6:	b29a      	uxth	r2, r3
  f8:	4b22      	ldr	r3, [pc, #136]	; (184 <UpdatePulseSequence+0x184>)
  fa:	83da      	strh	r2, [r3, #30]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:690
        PulseSeq.delay_between_sequences_loop_counts
                                    = MICROSECONDS_TO_LOOP_COUNTS(PulseSeq.delay_between_sequences_microseconds);     
  fc:	4b21      	ldr	r3, [pc, #132]	; (184 <UpdatePulseSequence+0x184>)
  fe:	88db      	ldrh	r3, [r3, #6]
 100:	4618      	mov	r0, r3
 102:	f7ff fffe 	bl	0 <__aeabi_ui2f>
 106:	4603      	mov	r3, r0
 108:	4618      	mov	r0, r3
 10a:	f7ff fffe 	bl	0 <__aeabi_f2d>
 10e:	4602      	mov	r2, r0
 110:	460b      	mov	r3, r1
 112:	4610      	mov	r0, r2
 114:	4619      	mov	r1, r3
 116:	f04f 0200 	mov.w	r2, #0
 11a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 11e:	f503 1338 	add.w	r3, r3, #3014656	; 0x2e0000
 122:	f7ff fffe 	bl	0 <__aeabi_dmul>
 126:	4602      	mov	r2, r0
 128:	460b      	mov	r3, r1
 12a:	4610      	mov	r0, r2
 12c:	4619      	mov	r1, r3
 12e:	f7ff fffe 	bl	0 <__aeabi_d2uiz>
 132:	4603      	mov	r3, r0
 134:	b29a      	uxth	r2, r3
 136:	4b13      	ldr	r3, [pc, #76]	; (184 <UpdatePulseSequence+0x184>)
 138:	811a      	strh	r2, [r3, #8]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:692
    
        switch(PulseSeq.frequency)
 13a:	4b12      	ldr	r3, [pc, #72]	; (184 <UpdatePulseSequence+0x184>)
 13c:	781b      	ldrb	r3, [r3, #0]
 13e:	2b02      	cmp	r3, #2
 140:	d00c      	beq.n	15c <UpdatePulseSequence+0x15c>
 142:	2b03      	cmp	r3, #3
 144:	d013      	beq.n	16e <UpdatePulseSequence+0x16e>
 146:	2b01      	cmp	r3, #1
 148:	d11a      	bne.n	180 <UpdatePulseSequence+0x180>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:695
        {
            case FREQUENCY_1KHZ:    
                    PulseSeq.frequency_divider = 3;     
 14a:	4b0e      	ldr	r3, [pc, #56]	; (184 <UpdatePulseSequence+0x184>)
 14c:	f04f 0203 	mov.w	r2, #3
 150:	805a      	strh	r2, [r3, #2]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:696
                    PulseSeq.sequence_multiplicity = SEQUENCEMULTIPLICITY_SINGLE;
 152:	4b0c      	ldr	r3, [pc, #48]	; (184 <UpdatePulseSequence+0x184>)
 154:	f04f 0200 	mov.w	r2, #0
 158:	711a      	strb	r2, [r3, #4]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:697
                    break; 
 15a:	e011      	b.n	180 <UpdatePulseSequence+0x180>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:699
            case FREQUENCY_2KHZ:    
                    PulseSeq.frequency_divider = 3;     
 15c:	4b09      	ldr	r3, [pc, #36]	; (184 <UpdatePulseSequence+0x184>)
 15e:	f04f 0203 	mov.w	r2, #3
 162:	805a      	strh	r2, [r3, #2]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:700
                    PulseSeq.sequence_multiplicity = SEQUENCEMULTIPLICITY_DOUBLE;
 164:	4b07      	ldr	r3, [pc, #28]	; (184 <UpdatePulseSequence+0x184>)
 166:	f04f 0201 	mov.w	r2, #1
 16a:	711a      	strb	r2, [r3, #4]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:701
                    break;
 16c:	e008      	b.n	180 <UpdatePulseSequence+0x180>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:703
            case FREQUENCY_3KHZ:    
                    PulseSeq.frequency_divider = 1;     
 16e:	4b05      	ldr	r3, [pc, #20]	; (184 <UpdatePulseSequence+0x184>)
 170:	f04f 0201 	mov.w	r2, #1
 174:	805a      	strh	r2, [r3, #2]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:704
                    PulseSeq.sequence_multiplicity = SEQUENCEMULTIPLICITY_SINGLE;
 176:	4b03      	ldr	r3, [pc, #12]	; (184 <UpdatePulseSequence+0x184>)
 178:	f04f 0200 	mov.w	r2, #0
 17c:	711a      	strb	r2, [r3, #4]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:705
                    break;
 17e:	bf00      	nop
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:707
        }
    }
 180:	bd80      	pop	{r7, pc}
 182:	bf00      	nop
 184:	00000004 	.word	0x00000004

Disassembly of section .text.GeneratePulseSequenceAndReadCAE:

00000000 <GeneratePulseSequenceAndReadCAE>:
GeneratePulseSequenceAndReadCAE():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:725

* Input          : None
* Return         : None
*******************************************************************************/
static void GeneratePulseSequenceAndReadCAE()
    {u32 i;    
   0:	b082b580 	.word	0xb082b580
   4:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:728
     u32 ad_value_0_to_4095;
    
    SetOutputVoltage(ZERO_VOLTAGE);
   6:	f04f 0002 	mov.w	r0, #2
   a:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:729
    WHILE_DELAY_LOOP(PulseSeq.delay0_loop_counts)
   e:	4b33      	ldr	r3, [pc, #204]	; (dc <GeneratePulseSequenceAndReadCAE+0xdc>)
  10:	899b      	ldrh	r3, [r3, #12]
  12:	607b      	str	r3, [r7, #4]
  14:	687b      	ldr	r3, [r7, #4]
  16:	2b00      	cmp	r3, #0
  18:	bf0c      	ite	eq
  1a:	2300      	moveq	r3, #0
  1c:	2301      	movne	r3, #1
  1e:	b2db      	uxtb	r3, r3
  20:	687a      	ldr	r2, [r7, #4]
  22:	f102 32ff 	add.w	r2, r2, #4294967295
  26:	607a      	str	r2, [r7, #4]
  28:	2b00      	cmp	r3, #0
  2a:	d1f3      	bne.n	14 <GeneratePulseSequenceAndReadCAE+0x14>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:731

    if(PulseSeq.delay1_loop_counts>0)
  2c:	4b2b      	ldr	r3, [pc, #172]	; (dc <GeneratePulseSequenceAndReadCAE+0xdc>)
  2e:	8a5b      	ldrh	r3, [r3, #18]
  30:	2b00      	cmp	r3, #0
  32:	d020      	beq.n	76 <GeneratePulseSequenceAndReadCAE+0x76>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:733
    {    
        SetOutputVoltage(POSITIVE_VOLTAGE_MAX);
  34:	f04f 0000 	mov.w	r0, #0
  38:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:735
    
        CX_Read(CX_ADC1, &ad_value_0_to_4095, 0);    
  3c:	4b28      	ldr	r3, [pc, #160]	; (e0 <GeneratePulseSequenceAndReadCAE+0xe0>)
  3e:	681b      	ldr	r3, [r3, #0]
  40:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
  44:	463a      	mov	r2, r7
  46:	f04f 0023 	mov.w	r0, #35	; 0x23
  4a:	4611      	mov	r1, r2
  4c:	f04f 0200 	mov.w	r2, #0
  50:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:737
        //IH150107 TODO  Conversion from ad_value_0_to_4095 to 0 to XXX (??)
        Readout.CAE1 = ad_value_0_to_4095;    
  52:	683a      	ldr	r2, [r7, #0]
  54:	4b23      	ldr	r3, [pc, #140]	; (e4 <GeneratePulseSequenceAndReadCAE+0xe4>)
  56:	601a      	str	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:739
    
        WHILE_DELAY_LOOP(PulseSeq.delay1_loop_counts)        
  58:	4b20      	ldr	r3, [pc, #128]	; (dc <GeneratePulseSequenceAndReadCAE+0xdc>)
  5a:	8a5b      	ldrh	r3, [r3, #18]
  5c:	607b      	str	r3, [r7, #4]
  5e:	687b      	ldr	r3, [r7, #4]
  60:	2b00      	cmp	r3, #0
  62:	bf0c      	ite	eq
  64:	2300      	moveq	r3, #0
  66:	2301      	movne	r3, #1
  68:	b2db      	uxtb	r3, r3
  6a:	687a      	ldr	r2, [r7, #4]
  6c:	f102 32ff 	add.w	r2, r2, #4294967295
  70:	607a      	str	r2, [r7, #4]
  72:	2b00      	cmp	r3, #0
  74:	d1f3      	bne.n	5e <GeneratePulseSequenceAndReadCAE+0x5e>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:742
    }
        
    SetOutputVoltage(ZERO_VOLTAGE);
  76:	f04f 0002 	mov.w	r0, #2
  7a:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:744
    
    WHILE_DELAY_LOOP(PulseSeq.delay2_loop_counts)    
  7e:	4b17      	ldr	r3, [pc, #92]	; (dc <GeneratePulseSequenceAndReadCAE+0xdc>)
  80:	8b1b      	ldrh	r3, [r3, #24]
  82:	607b      	str	r3, [r7, #4]
  84:	687b      	ldr	r3, [r7, #4]
  86:	2b00      	cmp	r3, #0
  88:	bf0c      	ite	eq
  8a:	2300      	moveq	r3, #0
  8c:	2301      	movne	r3, #1
  8e:	b2db      	uxtb	r3, r3
  90:	687a      	ldr	r2, [r7, #4]
  92:	f102 32ff 	add.w	r2, r2, #4294967295
  96:	607a      	str	r2, [r7, #4]
  98:	2b00      	cmp	r3, #0
  9a:	d1f3      	bne.n	84 <GeneratePulseSequenceAndReadCAE+0x84>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:746
   
    if(PulseSeq.delay3_loop_counts>0)
  9c:	4b0f      	ldr	r3, [pc, #60]	; (dc <GeneratePulseSequenceAndReadCAE+0xdc>)
  9e:	8bdb      	ldrh	r3, [r3, #30]
  a0:	2b00      	cmp	r3, #0
  a2:	d012      	beq.n	ca <GeneratePulseSequenceAndReadCAE+0xca>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:748
    {    
        SetOutputVoltage(NEGATIVE_VOLTAGE_MAX);
  a4:	f04f 0004 	mov.w	r0, #4
  a8:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:749
        WHILE_DELAY_LOOP(PulseSeq.delay3_loop_counts)    
  ac:	4b0b      	ldr	r3, [pc, #44]	; (dc <GeneratePulseSequenceAndReadCAE+0xdc>)
  ae:	8bdb      	ldrh	r3, [r3, #30]
  b0:	607b      	str	r3, [r7, #4]
  b2:	687b      	ldr	r3, [r7, #4]
  b4:	2b00      	cmp	r3, #0
  b6:	bf0c      	ite	eq
  b8:	2300      	moveq	r3, #0
  ba:	2301      	movne	r3, #1
  bc:	b2db      	uxtb	r3, r3
  be:	687a      	ldr	r2, [r7, #4]
  c0:	f102 32ff 	add.w	r2, r2, #4294967295
  c4:	607a      	str	r2, [r7, #4]
  c6:	2b00      	cmp	r3, #0
  c8:	d1f3      	bne.n	b2 <GeneratePulseSequenceAndReadCAE+0xb2>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:752
    }
    
    SetOutputVoltage(ZERO_VOLTAGE);                  
  ca:	f04f 0002 	mov.w	r0, #2
  ce:	f7ff fffe 	bl	0 <GeneratePulseSequenceAndReadCAE>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:753
    }   
  d2:	f107 0708 	add.w	r7, r7, #8
  d6:	46bd      	mov	sp, r7
  d8:	bd80      	pop	{r7, pc}
  da:	bf00      	nop
  dc:	00000004 	.word	0x00000004
  e0:	00000000 	.word	0x00000000
  e4:	00000028 	.word	0x00000028

Disassembly of section .text.SetOutputVoltage:

00000000 <SetOutputVoltage>:
SetOutputVoltage():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:767

* Input          : OutputVoltage_code oVcode
* Return         : None
*******************************************************************************/
static void SetOutputVoltage(OutputVoltage_code oVcode)
    {
   0:	b084b580 	.word	0xb084b580
   4:	af00      	add	r7, sp, #0
   6:	4603      	.short	0x4603
   8:	71fb      	strb	r3, [r7, #7]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:771
  
        static u8 controlByteForMAX5439=0;

        volatile u32 nb_byteSent = 1;
   a:	f04f 0301 	mov.w	r3, #1
   e:	60fb      	str	r3, [r7, #12]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:773
        
        switch(oVcode)
  10:	79fb      	ldrb	r3, [r7, #7]
  12:	2b04      	cmp	r3, #4
  14:	d825      	bhi.n	62 <SetOutputVoltage+0x62>
  16:	a201      	add	r2, pc, #4	; (adr r2, 1c <SetOutputVoltage+0x1c>)
  18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  1c:	00000031 	.word	0x00000031
  20:	0000003b 	.word	0x0000003b
  24:	00000045 	.word	0x00000045
  28:	0000004f 	.word	0x0000004f
  2c:	00000059 	.word	0x00000059
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:775
        {
            case POSITIVE_VOLTAGE_MAX:      controlByteForMAX5439=127;  break;
  30:	4b1e      	ldr	r3, [pc, #120]	; (ac <SetOutputVoltage+0xac>)
  32:	f04f 027f 	mov.w	r2, #127	; 0x7f
  36:	701a      	strb	r2, [r3, #0]
  38:	e013      	b.n	62 <SetOutputVoltage+0x62>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:776
            case POSITIVE_VOLTAGE_HALF:     controlByteForMAX5439=95;   break;
  3a:	4b1c      	ldr	r3, [pc, #112]	; (ac <SetOutputVoltage+0xac>)
  3c:	f04f 025f 	mov.w	r2, #95	; 0x5f
  40:	701a      	strb	r2, [r3, #0]
  42:	e00e      	b.n	62 <SetOutputVoltage+0x62>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:777
            case ZERO_VOLTAGE:              controlByteForMAX5439=63;   break;
  44:	4b19      	ldr	r3, [pc, #100]	; (ac <SetOutputVoltage+0xac>)
  46:	f04f 023f 	mov.w	r2, #63	; 0x3f
  4a:	701a      	strb	r2, [r3, #0]
  4c:	e009      	b.n	62 <SetOutputVoltage+0x62>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:778
            case NEGATIVE_VOLTAGE_HALF:     controlByteForMAX5439=31;   break;
  4e:	4b17      	ldr	r3, [pc, #92]	; (ac <SetOutputVoltage+0xac>)
  50:	f04f 021f 	mov.w	r2, #31
  54:	701a      	strb	r2, [r3, #0]
  56:	e004      	b.n	62 <SetOutputVoltage+0x62>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:779
            case NEGATIVE_VOLTAGE_MAX:      controlByteForMAX5439=0;    break;
  58:	4b14      	ldr	r3, [pc, #80]	; (ac <SetOutputVoltage+0xac>)
  5a:	f04f 0200 	mov.w	r2, #0
  5e:	701a      	strb	r2, [r3, #0]
  60:	bf00      	nop
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:782
        }
    
        CX_Write(CX_GPIO_PIN8,CX_GPIO_LOW,0);     
  62:	4b13      	ldr	r3, [pc, #76]	; (b0 <SetOutputVoltage+0xb0>)
  64:	681b      	ldr	r3, [r3, #0]
  66:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  6a:	f04f 0008 	mov.w	r0, #8
  6e:	f04f 0100 	mov.w	r1, #0
  72:	f04f 0200 	mov.w	r2, #0
  76:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:784

        CX_Write(CX_SPI,&controlByteForMAX5439,&nb_byteSent);
  78:	4b0d      	ldr	r3, [pc, #52]	; (b0 <SetOutputVoltage+0xb0>)
  7a:	681b      	ldr	r3, [r3, #0]
  7c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  80:	490a      	ldr	r1, [pc, #40]	; (ac <SetOutputVoltage+0xac>)
  82:	f107 020c 	add.w	r2, r7, #12
  86:	f04f 0021 	mov.w	r0, #33	; 0x21
  8a:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:785
        CX_Write(CX_GPIO_PIN8,CX_GPIO_HIGH,0);  //IH141230 this rising edge of the NSS signal actually sets the wiper 
  8c:	4b08      	ldr	r3, [pc, #32]	; (b0 <SetOutputVoltage+0xb0>)
  8e:	681b      	ldr	r3, [r3, #0]
  90:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  94:	f04f 0008 	mov.w	r0, #8
  98:	f04f 0101 	mov.w	r1, #1
  9c:	f04f 0200 	mov.w	r2, #0
  a0:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:790
                                                // (see MAX5439 datasheet)
    
        //IH140912 we do not wait for end of the transmission here, neither do we check the success
    
    }
  a2:	f107 0710 	add.w	r7, r7, #16
  a6:	46bd      	mov	sp, r7
  a8:	bd80      	pop	{r7, pc}
  aa:	bf00      	nop
  ac:	00000140 	.word	0x00000140
  b0:	00000000 	.word	0x00000000

Disassembly of section .text.GUI:

00000000 <GUI>:
GUI():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:800
* Input          :  GUIaction
                    readout1
* Return         : None
*******************************************************************************/
static void GUI(GUIaction_code GUIaction, u16 readout1)
    {
   0:	b590      	push	{r4, r7, lr}
   2:	b08f      	.short	0xb08f
   4:	af02      	add	r7, sp, #8
   6:	4602      	mov	r2, r0
   8:	460b      	mov	r3, r1
   a:	71fa      	strb	r2, [r7, #7]
   c:	80bb      	strh	r3, [r7, #4]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:816
       
#define STIM_SINGLE_BAR_WIDTH     8
    
    static StimState_code lastStimState = STIMSTATE_RUN;
    static u16 barPosX = 0;
    u16 barWidth = STIM_SINGLE_BAR_WIDTH;
   e:	f04f 0308 	mov.w	r3, #8
  12:	85fb      	strh	r3, [r7, #46]	; 0x2e
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:819
    
        
    float readoutYScalingFactor = 0.1;  //was 1.1 for debugging
  14:	4ba9      	ldr	r3, [pc, #676]	; (2bc <GUI+0x2bc>)
  16:	62bb      	str	r3, [r7, #40]	; 0x28
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:821
    
        switch(GUIaction)
  18:	79fb      	ldrb	r3, [r7, #7]
  1a:	2b03      	cmp	r3, #3
  1c:	f200 81bc 	bhi.w	398 <GUI+0x398>
  20:	a201      	add	r2, pc, #4	; (adr r2, 28 <GUI+0x28>)
  22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  26:	bf00      	nop
  28:	00000039 	.word	0x00000039
  2c:	000000db 	.word	0x000000db
  30:	00000039 	.word	0x00000039
  34:	000002c1 	.word	0x000002c1
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:826
        {
        case GUI_CLEAR:         //IH140319 currently identical with GUI_INITIALIZE
        case GUI_INITIALIZE:
            
            lastStimState = STIMSTATE_RUN;
  38:	4b9b      	ldr	r3, [pc, #620]	; (2a8 <GUI+0x2a8>)
  3a:	f04f 0201 	mov.w	r2, #1
  3e:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:827
            barPosX = 0;
  40:	4b9a      	ldr	r3, [pc, #616]	; (2ac <GUI+0x2ac>)
  42:	f04f 0200 	mov.w	r2, #0
  46:	801a      	strh	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:831
                            
            // graphics
            // These are default values
            DRAW_SetCharMagniCoeff(1);
  48:	4b99      	ldr	r3, [pc, #612]	; (2b0 <GUI+0x2b0>)
  4a:	681b      	ldr	r3, [r3, #0]
  4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
  50:	f04f 0001 	mov.w	r0, #1
  54:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:832
            DRAW_SetTextColor(RGB_WHITE);     
  56:	4b96      	ldr	r3, [pc, #600]	; (2b0 <GUI+0x2b0>)
  58:	681b      	ldr	r3, [r3, #0]
  5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  62:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:833
            DRAW_SetBGndColor(STIM_LOWERPANEL_COLOR);        
  64:	4b92      	ldr	r3, [pc, #584]	; (2b0 <GUI+0x2b0>)
  66:	681b      	ldr	r3, [r3, #0]
  68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
  6c:	f248 0001 	movw	r0, #32769	; 0x8001
  70:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:836
                        
            //Lower panel
            LCD_FillRect( 
  72:	4b8f      	ldr	r3, [pc, #572]	; (2b0 <GUI+0x2b0>)
  74:	681b      	ldr	r3, [r3, #0]
  76:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
  7a:	461c      	mov	r4, r3
  7c:	f248 0301 	movw	r3, #32769	; 0x8001
  80:	9300      	str	r3, [sp, #0]
  82:	f04f 0000 	mov.w	r0, #0
  86:	f04f 0100 	mov.w	r1, #0
  8a:	f04f 02f0 	mov.w	r2, #240	; 0xf0
  8e:	f04f 031e 	mov.w	r3, #30
  92:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:842
                0, 0, 
                SCREEN_WIDTH, STIM_LOWERPANEL_HEIGHT, 
                STIM_LOWERPANEL_COLOR );
        
            //Middle panel
            LCD_FillRect(
  94:	4b86      	ldr	r3, [pc, #536]	; (2b0 <GUI+0x2b0>)
  96:	681b      	ldr	r3, [r3, #0]
  98:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
  9c:	461c      	mov	r4, r3
  9e:	f246 1308 	movw	r3, #24840	; 0x6108
  a2:	9300      	str	r3, [sp, #0]
  a4:	f04f 0000 	mov.w	r0, #0
  a8:	f04f 011e 	mov.w	r1, #30
  ac:	f04f 02f0 	mov.w	r2, #240	; 0xf0
  b0:	f04f 0396 	mov.w	r3, #150	; 0x96
  b4:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:848
                0, STIM_LOWERPANEL_HEIGHT, 
                SCREEN_WIDTH, STIM_MIDDLEPANEL_HEIGHT,                 
                STIM_MIDDLEPANEL_COLOR );
              
            //Upper panel
            LCD_FillRect(
  b6:	4b7e      	ldr	r3, [pc, #504]	; (2b0 <GUI+0x2b0>)
  b8:	681b      	ldr	r3, [r3, #0]
  ba:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
  be:	461c      	mov	r4, r3
  c0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
  c4:	9300      	str	r3, [sp, #0]
  c6:	f04f 0000 	mov.w	r0, #0
  ca:	f04f 01b4 	mov.w	r1, #180	; 0xb4
  ce:	f04f 02f0 	mov.w	r2, #240	; 0xf0
  d2:	f04f 033c 	mov.w	r3, #60	; 0x3c
  d6:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:854
                0, SCREEN_HEIGHT-STIM_UPPERPANEL_HEIGHT, 
                SCREEN_WIDTH, 
                STIM_UPPERPANEL_HEIGHT, 
                STIM_UPPERPANEL_COLOR );
                    
            break;
  d8:	e15e      	b.n	398 <GUI+0x398>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:861
        case GUI_NORMAL_UPDATE:
            
            // display readout figure
            {
            u8 str[30];        
            UTIL_int2str( str, Readout.CAE1, 4, FALSE);    
  da:	4b75      	ldr	r3, [pc, #468]	; (2b0 <GUI+0x2b0>)
  dc:	681b      	ldr	r3, [r3, #0]
  de:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
  e2:	461c      	mov	r4, r3
  e4:	f107 0208 	add.w	r2, r7, #8
  e8:	4b72      	ldr	r3, [pc, #456]	; (2b4 <GUI+0x2b4>)
  ea:	681b      	ldr	r3, [r3, #0]
  ec:	4610      	mov	r0, r2
  ee:	4619      	mov	r1, r3
  f0:	f04f 0204 	mov.w	r2, #4
  f4:	f04f 0300 	mov.w	r3, #0
  f8:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:863
            
            DRAW_SetCharMagniCoeff(4);            
  fa:	4b6d      	ldr	r3, [pc, #436]	; (2b0 <GUI+0x2b0>)
  fc:	681b      	ldr	r3, [r3, #0]
  fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 102:	f04f 0004 	mov.w	r0, #4
 106:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:864
            DRAW_SetTextColor(RGB_YELLOW);     
 108:	4b69      	ldr	r3, [pc, #420]	; (2b0 <GUI+0x2b0>)
 10a:	681b      	ldr	r3, [r3, #0]
 10c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 110:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
 114:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:865
            DRAW_SetBGndColor(STIM_UPPERPANEL_COLOR);        
 116:	4b66      	ldr	r3, [pc, #408]	; (2b0 <GUI+0x2b0>)
 118:	681b      	ldr	r3, [r3, #0]
 11a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 11e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 122:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:867
            
            DRAW_DisplayStringWithMode( 0,180,str, 0, NORMAL_TEXT, LEFT);            
 124:	4b62      	ldr	r3, [pc, #392]	; (2b0 <GUI+0x2b0>)
 126:	681b      	ldr	r3, [r3, #0]
 128:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 12c:	461c      	mov	r4, r3
 12e:	f107 0308 	add.w	r3, r7, #8
 132:	f04f 0200 	mov.w	r2, #0
 136:	9200      	str	r2, [sp, #0]
 138:	f04f 0200 	mov.w	r2, #0
 13c:	9201      	str	r2, [sp, #4]
 13e:	f04f 0000 	mov.w	r0, #0
 142:	f04f 01b4 	mov.w	r1, #180	; 0xb4
 146:	461a      	mov	r2, r3
 148:	f04f 0300 	mov.w	r3, #0
 14c:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:869
            
            DRAW_SetCharMagniCoeff(1);            
 14e:	4b58      	ldr	r3, [pc, #352]	; (2b0 <GUI+0x2b0>)
 150:	681b      	ldr	r3, [r3, #0]
 152:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 156:	f04f 0001 	mov.w	r0, #1
 15a:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:870
            DRAW_SetTextColor(RGB_WHITE);     
 15c:	4b54      	ldr	r3, [pc, #336]	; (2b0 <GUI+0x2b0>)
 15e:	681b      	ldr	r3, [r3, #0]
 160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 164:	f64f 70ff 	movw	r0, #65535	; 0xffff
 168:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:871
            DRAW_SetBGndColor(STIM_LOWERPANEL_COLOR);        
 16a:	4b51      	ldr	r3, [pc, #324]	; (2b0 <GUI+0x2b0>)
 16c:	681b      	ldr	r3, [r3, #0]
 16e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 172:	f248 0001 	movw	r0, #32769	; 0x8001
 176:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:875
            }
        
            // display graphics
            switch(StimState)
 178:	4b4f      	ldr	r3, [pc, #316]	; (2b8 <GUI+0x2b8>)
 17a:	781b      	ldrb	r3, [r3, #0]
 17c:	2b03      	cmp	r3, #3
 17e:	f200 8088 	bhi.w	292 <GUI+0x292>
 182:	a201      	add	r2, pc, #4	; (adr r2, 188 <GUI+0x188>)
 184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 188:	00000199 	.word	0x00000199
 18c:	000001cd 	.word	0x000001cd
 190:	00000199 	.word	0x00000199
 194:	000001cd 	.word	0x000001cd
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:879
            {
            case STIMSTATE_IDLE:  
            case STIMSTATE_WAITING_FOR_RUN:  
                if(lastStimState!=STIMSTATE_IDLE)
 198:	4b43      	ldr	r3, [pc, #268]	; (2a8 <GUI+0x2a8>)
 19a:	781b      	ldrb	r3, [r3, #0]
 19c:	2b00      	cmp	r3, #0
 19e:	d010      	beq.n	1c2 <GUI+0x1c2>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:882
                    {
                    //Clean middle panel
                    LCD_FillRect(
 1a0:	4b43      	ldr	r3, [pc, #268]	; (2b0 <GUI+0x2b0>)
 1a2:	681b      	ldr	r3, [r3, #0]
 1a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 1a8:	461c      	mov	r4, r3
 1aa:	f246 1308 	movw	r3, #24840	; 0x6108
 1ae:	9300      	str	r3, [sp, #0]
 1b0:	f04f 0000 	mov.w	r0, #0
 1b4:	f04f 011e 	mov.w	r1, #30
 1b8:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 1bc:	f04f 0396 	mov.w	r3, #150	; 0x96
 1c0:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:887
                        0, STIM_LOWERPANEL_HEIGHT, 
                        SCREEN_WIDTH, STIM_MIDDLEPANEL_HEIGHT,
                        STIM_MIDDLEPANEL_COLOR );                                                                           
                    }
                lastStimState = STIMSTATE_IDLE;
 1c2:	4b39      	ldr	r3, [pc, #228]	; (2a8 <GUI+0x2a8>)
 1c4:	f04f 0200 	mov.w	r2, #0
 1c8:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:888
                break;
 1ca:	e062      	b.n	292 <GUI+0x292>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:892
        
            case STIMSTATE_RUN:                 
            case STIMSTATE_WAITING_FOR_IDLE:  
                if(lastStimState!=STIMSTATE_RUN)
 1cc:	4b36      	ldr	r3, [pc, #216]	; (2a8 <GUI+0x2a8>)
 1ce:	781b      	ldrb	r3, [r3, #0]
 1d0:	2b01      	cmp	r3, #1
 1d2:	d015      	beq.n	200 <GUI+0x200>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:895
                    {
                    //Clean middle panel
                    LCD_FillRect(
 1d4:	4b36      	ldr	r3, [pc, #216]	; (2b0 <GUI+0x2b0>)
 1d6:	681b      	ldr	r3, [r3, #0]
 1d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 1dc:	461c      	mov	r4, r3
 1de:	f246 1308 	movw	r3, #24840	; 0x6108
 1e2:	9300      	str	r3, [sp, #0]
 1e4:	f04f 0000 	mov.w	r0, #0
 1e8:	f04f 011e 	mov.w	r1, #30
 1ec:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 1f0:	f04f 0396 	mov.w	r3, #150	; 0x96
 1f4:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:900
                        0, STIM_LOWERPANEL_HEIGHT, 
                        SCREEN_WIDTH, STIM_MIDDLEPANEL_HEIGHT,                        
                        STIM_MIDDLEPANEL_COLOR );
                    
                    barPosX=0;
 1f6:	4b2d      	ldr	r3, [pc, #180]	; (2ac <GUI+0x2ac>)
 1f8:	f04f 0200 	mov.w	r2, #0
 1fc:	801a      	strh	r2, [r3, #0]
 1fe:	e03a      	b.n	276 <GUI+0x276>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:904
                    }
                else
                    {
                    u16 barHeight = Readout.CAE1 * readoutYScalingFactor;
 200:	4b2c      	ldr	r3, [pc, #176]	; (2b4 <GUI+0x2b4>)
 202:	681b      	ldr	r3, [r3, #0]
 204:	4618      	mov	r0, r3
 206:	f7ff fffe 	bl	0 <__aeabi_ui2f>
 20a:	4603      	mov	r3, r0
 20c:	4618      	mov	r0, r3
 20e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 210:	f7ff fffe 	bl	0 <__aeabi_fmul>
 214:	4603      	mov	r3, r0
 216:	4618      	mov	r0, r3
 218:	f7ff fffe 	bl	0 <__aeabi_f2uiz>
 21c:	4603      	mov	r3, r0
 21e:	84fb      	strh	r3, [r7, #38]	; 0x26
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:909
                    if(barHeight>STIM_MIDDLEPANEL_HEIGHT)
                        {
                        barHeight>STIM_MIDDLEPANEL_HEIGHT;
                        }
                    LCD_FillRect(
 220:	4b23      	ldr	r3, [pc, #140]	; (2b0 <GUI+0x2b0>)
 222:	681b      	ldr	r3, [r3, #0]
 224:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 228:	461c      	mov	r4, r3
 22a:	4b20      	ldr	r3, [pc, #128]	; (2ac <GUI+0x2ac>)
 22c:	881b      	ldrh	r3, [r3, #0]
 22e:	461a      	mov	r2, r3
 230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 232:	f64f 71ff 	movw	r1, #65535	; 0xffff
 236:	9100      	str	r1, [sp, #0]
 238:	4610      	mov	r0, r2
 23a:	f04f 011e 	mov.w	r1, #30
 23e:	461a      	mov	r2, r3
 240:	f04f 0396 	mov.w	r3, #150	; 0x96
 244:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:913
                        barPosX, STIM_LOWERPANEL_HEIGHT, 
                        barWidth, STIM_MIDDLEPANEL_HEIGHT,                        
                        STIM_BARBG_COLOR );                    
                    LCD_FillRect(
 246:	4b1a      	ldr	r3, [pc, #104]	; (2b0 <GUI+0x2b0>)
 248:	681b      	ldr	r3, [r3, #0]
 24a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 24e:	461c      	mov	r4, r3
 250:	4b16      	ldr	r3, [pc, #88]	; (2ac <GUI+0x2ac>)
 252:	881b      	ldrh	r3, [r3, #0]
 254:	4619      	mov	r1, r3
 256:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 258:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 25a:	f04f 00f8 	mov.w	r0, #248	; 0xf8
 25e:	9000      	str	r0, [sp, #0]
 260:	4608      	mov	r0, r1
 262:	f04f 011e 	mov.w	r1, #30
 266:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:917
                        barPosX, STIM_LOWERPANEL_HEIGHT, 
                        barWidth, barHeight,                        
                        STIM_BARFG_COLOR );                    
                    barPosX += barWidth;
 268:	4b10      	ldr	r3, [pc, #64]	; (2ac <GUI+0x2ac>)
 26a:	881a      	ldrh	r2, [r3, #0]
 26c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 26e:	18d3      	adds	r3, r2, r3
 270:	b29a      	uxth	r2, r3
 272:	4b0e      	ldr	r3, [pc, #56]	; (2ac <GUI+0x2ac>)
 274:	801a      	strh	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:924
                    if(barPosX>SCREEN_WIDTH)
                        {
                        barPosX;
                        }
                    }
                lastStimState = STIMSTATE_RUN;                
 276:	4b0c      	ldr	r3, [pc, #48]	; (2a8 <GUI+0x2a8>)
 278:	f04f 0201 	mov.w	r2, #1
 27c:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:925
                if(barPosX>SCREEN_WIDTH)
 27e:	4b0b      	ldr	r3, [pc, #44]	; (2ac <GUI+0x2ac>)
 280:	881b      	ldrh	r3, [r3, #0]
 282:	2bf0      	cmp	r3, #240	; 0xf0
 284:	d904      	bls.n	290 <GUI+0x290>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:927
                        {
                        lastStimState = STIMSTATE_IDLE;  //begin new graphics screen                
 286:	4b08      	ldr	r3, [pc, #32]	; (2a8 <GUI+0x2a8>)
 288:	f04f 0200 	mov.w	r2, #0
 28c:	701a      	strb	r2, [r3, #0]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:929
                        }
                break;
 28e:	e000      	b.n	292 <GUI+0x292>
 290:	bf00      	nop
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:935
                                    
            
            }        
                
            // display time
            DRAW_DisplayTime( 10, 10);            
 292:	4b07      	ldr	r3, [pc, #28]	; (2b0 <GUI+0x2b0>)
 294:	681b      	ldr	r3, [r3, #0]
 296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 29a:	f04f 000a 	mov.w	r0, #10
 29e:	f04f 010a 	mov.w	r1, #10
 2a2:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:936
            break;            
 2a4:	e078      	b.n	398 <GUI+0x398>
 2a6:	bf00      	nop
 2a8:	000001ec 	.word	0x000001ec
 2ac:	0000013e 	.word	0x0000013e
 2b0:	00000000 	.word	0x00000000
 2b4:	00000028 	.word	0x00000028
 2b8:	0000002c 	.word	0x0000002c
 2bc:	3dcccccd 	.word	0x3dcccccd
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:940
        
        case GUI_INTRO_SCREEN:            
            
            DRAW_SetCharMagniCoeff(2);
 2c0:	4b37      	ldr	r3, [pc, #220]	; (3a0 <GUI+0x3a0>)
 2c2:	681b      	ldr	r3, [r3, #0]
 2c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 2c8:	f04f 0002 	mov.w	r0, #2
 2cc:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:941
            DRAW_SetTextColor(RGB_GREEN);                 
 2ce:	4b34      	ldr	r3, [pc, #208]	; (3a0 <GUI+0x3a0>)
 2d0:	681b      	ldr	r3, [r3, #0]
 2d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 2d6:	f24e 0007 	movw	r0, #57351	; 0xe007
 2da:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:943
            
            LCD_FillRect(
 2dc:	4b30      	ldr	r3, [pc, #192]	; (3a0 <GUI+0x3a0>)
 2de:	681b      	ldr	r3, [r3, #0]
 2e0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 2e4:	461c      	mov	r4, r3
 2e6:	f640 03fc 	movw	r3, #2300	; 0x8fc
 2ea:	9300      	str	r3, [sp, #0]
 2ec:	f04f 0000 	mov.w	r0, #0
 2f0:	f04f 0100 	mov.w	r1, #0
 2f4:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 2f8:	f04f 03f0 	mov.w	r3, #240	; 0xf0
 2fc:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:948
            0, 0, 
            SCREEN_WIDTH, SCREEN_HEIGHT,                 
            RGB_ORANGE );
            
            DRAW_DisplayStringWithMode( 0,180,"STiM32", ALL_SCREEN, INVERTED_TEXT, CENTER);            
 2fe:	4b28      	ldr	r3, [pc, #160]	; (3a0 <GUI+0x3a0>)
 300:	681b      	ldr	r3, [r3, #0]
 302:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 306:	461c      	mov	r4, r3
 308:	4b26      	ldr	r3, [pc, #152]	; (3a4 <GUI+0x3a4>)
 30a:	f04f 0201 	mov.w	r2, #1
 30e:	9200      	str	r2, [sp, #0]
 310:	f04f 0201 	mov.w	r2, #1
 314:	9201      	str	r2, [sp, #4]
 316:	f04f 0000 	mov.w	r0, #0
 31a:	f04f 01b4 	mov.w	r1, #180	; 0xb4
 31e:	461a      	mov	r2, r3
 320:	f04f 33ff 	mov.w	r3, #4294967295
 324:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:949
            DRAW_SetCharMagniCoeff(1);
 326:	4b1e      	ldr	r3, [pc, #120]	; (3a0 <GUI+0x3a0>)
 328:	681b      	ldr	r3, [r3, #0]
 32a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 32e:	f04f 0001 	mov.w	r0, #1
 332:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:950
            DRAW_DisplayStringWithMode( 0,160,STIM32_VERSION, ALL_SCREEN, INVERTED_TEXT, CENTER);            
 334:	4b1a      	ldr	r3, [pc, #104]	; (3a0 <GUI+0x3a0>)
 336:	681b      	ldr	r3, [r3, #0]
 338:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 33c:	461c      	mov	r4, r3
 33e:	4b1a      	ldr	r3, [pc, #104]	; (3a8 <GUI+0x3a8>)
 340:	f04f 0201 	mov.w	r2, #1
 344:	9200      	str	r2, [sp, #0]
 346:	f04f 0201 	mov.w	r2, #1
 34a:	9201      	str	r2, [sp, #4]
 34c:	f04f 0000 	mov.w	r0, #0
 350:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 354:	461a      	mov	r2, r3
 356:	f04f 33ff 	mov.w	r3, #4294967295
 35a:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:952
        
            DRAW_SetCharMagniCoeff(1);
 35c:	4b10      	ldr	r3, [pc, #64]	; (3a0 <GUI+0x3a0>)
 35e:	681b      	ldr	r3, [r3, #0]
 360:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 364:	f04f 0001 	mov.w	r0, #1
 368:	4798      	blx	r3
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:953
            DRAW_DisplayStringWithMode( 0,100,GetBatteryStatusString(), ALL_SCREEN, NORMAL_TEXT, CENTER);            
 36a:	4b0d      	ldr	r3, [pc, #52]	; (3a0 <GUI+0x3a0>)
 36c:	681b      	ldr	r3, [r3, #0]
 36e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 372:	461c      	mov	r4, r3
 374:	f7ff fffe 	bl	0 <GUI>
 378:	4603      	mov	r3, r0
 37a:	f04f 0200 	mov.w	r2, #0
 37e:	9200      	str	r2, [sp, #0]
 380:	f04f 0201 	mov.w	r2, #1
 384:	9201      	str	r2, [sp, #4]
 386:	f04f 0000 	mov.w	r0, #0
 38a:	f04f 0164 	mov.w	r1, #100	; 0x64
 38e:	461a      	mov	r2, r3
 390:	f04f 33ff 	mov.w	r3, #4294967295
 394:	47a0      	blx	r4
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:954
            break;                                                     
 396:	bf00      	nop
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:956
        }
    }
 398:	f107 0734 	add.w	r7, r7, #52	; 0x34
 39c:	46bd      	mov	sp, r7
 39e:	bd90      	pop	{r4, r7, pc}
 3a0:	00000000 	.word	0x00000000
 3a4:	0000008c 	.word	0x0000008c
 3a8:	00000094 	.word	0x00000094

Disassembly of section .text.SetAutorun:

00000000 <SetAutorun>:
SetAutorun():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:965
* Description    : Sets the bit 7 in SYS2 backup register to autorun this application 
* Input          : None                     
* Return         : None
*******************************************************************************/
static void SetAutorun(void)
    {
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:970
            
        //IH150107 TODO
    
        //IH150125 the autorun is currently set in the CircleOS menu
    }
   4:	46bd      	mov	sp, r7
   6:	bc80      	pop	{r7}
   8:	4770      	bx	lr
   a:	bf00      	nop

Disassembly of section .text.GetBatteryStatusString:

00000000 <GetBatteryStatusString>:
GetBatteryStatusString():
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:973

static char* GetBatteryStatusString(void)
    {
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:974
        u16 vbat_mV = UTIL_GetBat();
   6:	4b0f      	ldr	r3, [pc, #60]	; (44 <GetBatteryStatusString+0x44>)
   8:	681b      	ldr	r3, [r3, #0]
   a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
   e:	4798      	blx	r3
  10:	4603      	mov	r3, r0
  12:	80fb      	strh	r3, [r7, #6]
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:977
        
        // max string lenght is BATTERY_STATUS_STRING_LENGHT
        strcpy(BatteryStatusString, "Battery OK");
  14:	480c      	ldr	r0, [pc, #48]	; (48 <GetBatteryStatusString+0x48>)
  16:	490d      	ldr	r1, [pc, #52]	; (4c <GetBatteryStatusString+0x4c>)
  18:	f04f 020b 	mov.w	r2, #11
  1c:	f7ff fffe 	bl	0 <memcpy>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:978
        if(vbat_mV<VBAT_MV_LOW)
  20:	88fa      	ldrh	r2, [r7, #6]
  22:	f640 739f 	movw	r3, #3999	; 0xf9f
  26:	429a      	cmp	r2, r3
  28:	d805      	bhi.n	36 <GetBatteryStatusString+0x36>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:980
        {
            strcpy(BatteryStatusString, "Battery LOW");
  2a:	4807      	ldr	r0, [pc, #28]	; (48 <GetBatteryStatusString+0x48>)
  2c:	4908      	ldr	r1, [pc, #32]	; (50 <GetBatteryStatusString+0x50>)
  2e:	f04f 020c 	mov.w	r2, #12
  32:	f7ff fffe 	bl	0 <memcpy>
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:983
        }
    
        return BatteryStatusString;
  36:	4b04      	ldr	r3, [pc, #16]	; (48 <GetBatteryStatusString+0x48>)
C:\Users\Igor\Documents\GitHub\STiM32/STiM32.c:984
    }
  38:	4618      	mov	r0, r3
  3a:	f107 0708 	add.w	r7, r7, #8
  3e:	46bd      	mov	sp, r7
  40:	bd80      	pop	{r7, pc}
  42:	bf00      	nop
  44:	00000000 	.word	0x00000000
  48:	00000134 	.word	0x00000134
  4c:	0000009c 	.word	0x0000009c
  50:	000000a8 	.word	0x000000a8
